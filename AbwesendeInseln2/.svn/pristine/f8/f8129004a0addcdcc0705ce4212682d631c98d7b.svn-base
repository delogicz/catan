package view;

import java.util.ArrayList;

import game.Settings;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import model.Player;
import model.ResourceType;
import model.TradeOffer;

/**
 * Class for Trades
 *
 */
public class TradeOfferSkin extends GridPane{
	
	private boolean playerColorIsWhite;
	
	/**
	 * Constructor
	 * @param player
	 * @param tradeOffer
	 */
	public TradeOfferSkin(Player player, TradeOffer tradeOffer){
		
		super();
		
		this.playerColorIsWhite = false;
		
		switch(player.getPlayerColor()){
		case RED: 		setStyle("-fx-background-color: darkred; -fx-padding: 10;"); break;
		case ORANGE: 	setStyle("-fx-background-color: orange; -fx-padding: 10;"); break;
		case BLUE: 		setStyle("-fx-background-color: darkblue; -fx-padding: 10;"); break;
		case WHITE:		setStyle("-fx-background-color: antiquewhite; -fx-padding: 10;");
		                playerColorIsWhite = true; break;
		}
		
		this.setVgap(8);
		this.setHgap(15);
		this.setPrefSize(300, 100);
		
		Label idLabel = new Label("TradeID: " + tradeOffer.getTradeId());
		Label label = new Label("Offer from " + player.getName());
		Label offerLabel = new Label("Offer:");
		Label requestLabel = new Label("Request:");
		Label offer = new Label(generateString(tradeOffer.getOffer()));
		Label request = new Label(generateString(tradeOffer.getDemand()));
		
		if(player.getPlayerID() != player.getCatan().getPlayerClient().getPlayerID()){
			Button acceptButton = new Button("Accept Trade");
			Settings.changeFont(acceptButton, false);
			this.add(acceptButton, 0, 3);
			
			acceptButton.setOnAction(new EventHandler<ActionEvent>(){

				@Override
				public void handle(ActionEvent event) {
					player.getCatan().getGameManager().getClient().sendAcceptTrade(tradeOffer.getTradeId());
				}
			});
		}
		
		else{
			Button enterButton = new Button("Enter Trade");
			Settings.changeFont(enterButton, false);
			this.add(enterButton, 0, 3);
			
			enterButton.setOnAction(new EventHandler<ActionEvent>(){

				@Override
				public void handle(ActionEvent event) {
					if(tradeOffer.getAcceptedTraders().size() > 0){
						player.getCatan().getGameSkin().getTradeSkin().
					              showSealTheDeal(tradeOffer.getAcceptedTraders(), tradeOffer.getTradeId(), player);
					}
					else if(tradeOffer.getDeclinedTraders().size() >= player.getCatan().getPlayerCount()-1){
						player.getCatan().getGameManager().getApp().popUpMessage("Your trade got declined by "
								+ "all players.");
					}
					else{
						player.getCatan().getGameManager().getApp().popUpMessage("Your trade wasn't "
								+ "accepted by a player yet.");
					}
				}
			});
		}
		Button declineButton = new Button("Decline Trade");
		Settings.changeFont(declineButton, false);
		this.add(declineButton, 1, 3);
		declineButton.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			public void handle(ActionEvent event) {
				player.getCatan().getGameManager().getClient().sendNotAcceptTrade(tradeOffer.getTradeId());
			}
		});
		Button deleteTradeButton = new Button("Delete Trade");
		Settings.changeFont(deleteTradeButton, false);
		this.add(deleteTradeButton, 2, 3);
			
		deleteTradeButton.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			public void handle(ActionEvent event) {
				player.getCatan().getGameManager().getClient().sendCancelTrade(tradeOffer.getTradeId());
			}
		});
		
		Settings.changeFont(idLabel, !playerColorIsWhite);
		Settings.changeFontBig(label, !playerColorIsWhite);
		Settings.changeFontBig(offerLabel, !playerColorIsWhite);
		Settings.changeFontBig(requestLabel, !playerColorIsWhite);
		Settings.changeFont(offer, !playerColorIsWhite);
		Settings.changeFont(request, !playerColorIsWhite);
		
		this.add(label, 0, 0);
		this.add(idLabel, 2, 0);
		this.add(offerLabel, 0, 1);
		this.add(requestLabel, 1, 1);
		this.add(offer, 0, 2);
		this.add(request, 1, 2);
		
	}
	
	/**
	 * Generates the String of offer and request
	 * @param resources
	 * @return
	 */
	private String generateString(ArrayList<ResourceType> resources) {
		String string = "";
		int[] resArray = new int[5];
		for(ResourceType res : resources){
			switch(res){
			case LUMBER:  resArray[0]++; break;
			case BRICK :  resArray[1]++; break;
			case WOOL  :  resArray[2]++; break;
			case GRAIN :  resArray[3]++; break;
			case ORE   :  resArray[4]++; break;
			}
		}
		for(int i = 0; i < 5; i++){
			if(resArray[i] != 0){
				switch(i){
				case 0: string += "Lumber: " ; break;
				case 1: string += "Brick : "; break;
				case 2: string += "Wool  : "; break;
				case 3: string += "Grain : "; break;
				case 4: string += "Ore   : "; break;
				}
				string += resArray[i]+"\n";
			}
		}
		
		return string;
	}
}
