package network;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;

import com.google.gson.Gson;

import jsonstructures.BauNachricht;
import jsonstructures.BauvorgangNachricht;
import jsonstructures.ClientChatDaten;
import jsonstructures.ErtragsDaten;
import jsonstructures.FehlerNachricht;
import jsonstructures.GebaeudeDaten;
import jsonstructures.GebaeudeDatenDaten;
import jsonstructures.HalloNachricht;
import jsonstructures.KartenDaten;
import jsonstructures.RohstoffDaten;
import jsonstructures.ServerChatNachricht;
import jsonstructures.ServerantwortNachricht;
import jsonstructures.SpielerInitNachricht;
import jsonstructures.SpielerZustandsDaten;
import jsonstructures.SpielerZustandsDatenDaten;
import jsonstructures.StatusUpdateNachricht;
import jsonstructures.VersionProtokollDaten;
import jsonstructures.WillkommenNachricht;
import jsonstructures.WuerfelDaten;
import jsonstructures.WuerfelNachricht;
import model.Edge;
import model.PlayerColor;
import model.ResourceType;
import model.Vertex;

/**
 * This class is the Client for the connection to the server
 * @author Felixi
 *
 */
public class Client extends Thread{
	private static final String version = "JavaFXClient 0.1 (AbwesendeInseln)";
	private Gson gson;
	private Socket server;
	private Scanner in;
	/**
	 * Creates new Client
	 * @param host IP-Adress of Host
	 * @param port Port
	 */
	public Client(String host, int port){
		gson = new Gson();
		/*try {
			server = new Socket(host, port);
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}*/
	}
	
	/**
	 * Sends message Server
	 * @param text Message
	 */
	public void sendText(String text){
		PrintWriter out;
		try {
			out = new PrintWriter(server.getOutputStream(),true);
			out.println(text);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Receives messages from Server
	 */
	public void receive(){
		try {
			in  = new Scanner(server.getInputStream());
			if(!in.hasNextLine()){
				in.close();
				return;
			}
			String text = in.nextLine();
			handleInput(text);
		} catch (IOException e) {
			e.printStackTrace();
			in.close();
		}
	}
	
	/**
	 * Handles the JSON text input and handles which message is send by the server
	 * @param text	input by the server
	 */
	private void handleInput(String text) {
		String head = text.substring(0,5);
		String head2 = text.substring(0,17);
		switch(head){
		case "Hallo:{F": handleHello(text);break;
		case "Willkomm": handleWelcome(text);break;
		case "Serverna": handleServerMsg(text);break;
		case "Chatnach": handleChat(text);break;
		case "Fehler:{": handleError(text);break;
		case "Spiel ge": handleStartMatch(text);break;
		case "Statusup": handleStatusUpdate(text);break;
		case "Wuerfelw": handleDice(text);break;
		case "Ertrag:{": handleProduce(text);break;
		case "Bauvorga": handleConstruction(text);break;
		case "Spiel be": handleEndMatch(text);break;
		case "Kosten:{": handleCost(text);break;
		case "Raeuber ": handleSetRobber(text);break;
		case "Handel a": handleTradeDone(text);break;
		case "Handelsa": 			switch(head2){
									case "Handelsangebot:{S": handleTrade(text);break;
									case "Handelsangebot an": handleAcceptedTrade(text);break;
									case "Handelsangebot ab": handleCanceledTrade(text);break;
									}break;
		}
		
	}

	private void handleCanceledTrade(String text) {
		// TODO Auto-generated method stub
		
	}

	private void handleTradeDone(String text) {
		// TODO Auto-generated method stub
		
	}

	private void handleAcceptedTrade(String text) {
		// TODO Auto-generated method stub
		
	}

	private void handleTrade(String text) {
		// TODO Auto-generated method stub
		
	}

	private void handleSetRobber(String text) {
		// TODO Auto-generated method stub
		
	}

	private void handleCost(String text) {
		// TODO Auto-generated method stub
		
	}

	private void handleEndMatch(String text) {
		// TODO Auto-generated method stub
		
	}

	/**
	 * Handles the construction message
	 * @param text
	 */
	private void handleConstruction(String text) {
		BauvorgangNachricht bn = gson.fromJson(text, BauvorgangNachricht.class);
		GebaeudeDatenDaten gdd = bn.getBauvorgang();
		GebaeudeDaten gd = gdd.getGebaeude();
		int playerID = gd.getEigentuemer();
		String typ = gd.getTyp();
		Object location = gd.getOrt();
		if(location instanceof Edge){
			Edge edge = (Edge) location; 
		}else{
			Vertex vertex = (Vertex) location;
		}
		
	}

	/**
	 * handles the produce message
	 * @param text
	 */
	private void handleProduce(String text) {
		ErtragsDaten en = gson.fromJson(text, ErtragsDaten.class);
		int playerID = en.getSpieler();
		RohstoffDaten rd = en.getRohstoffe();
		ArrayList<ResourceType> resources = rd.getResources();
	}

	/**
	 * handles the dice roll message
	 * @param text
	 */
	private void handleDice(String text) {
		WuerfelNachricht wn = gson.fromJson(text, WuerfelNachricht.class);
		WuerfelDaten wd = wn.getWuerfelwurf();
		int playerID = wd.getSpieler();
		int number = wd.getWurf();
	}

	/**
	 * handles the status update message
	 * @param text
	 */
	private void handleStatusUpdate(String text) {
		StatusUpdateNachricht sn = gson.fromJson(text, StatusUpdateNachricht.class);
		SpielerZustandsDatenDaten szdd = sn.getStatusupdate();
		SpielerZustandsDaten szd = szdd.getSpieler();
		int playerID = szd.getId();
		int victoryPoints = szd.getSiegpunkte();
		String name = szd.getName();
		String status = szd.getStatus();
		PlayerColor color = szd.getFarbe();
		RohstoffDaten rd = szd.getRohstoffe();
		ArrayList<ResourceType> resources = rd.getResources();
	}
	
	/**
	 * handles the start match message
	 * @param text
	 */

	private void handleStartMatch(String text) {
		String sub = text.substring(20,text.length()-1);
		KartenDaten kd = gson.fromJson(sub, KartenDaten.class);
	}

	/**
	 * handles the error messages
	 * @param text
	 */
	private void handleError(String text) {
		FehlerNachricht fn = gson.fromJson(text, FehlerNachricht.class);
		String error = fn.getDaten();
	}

	/** 
	 * handles the chat messages
	 * @param text
	 */
	private void handleChat(String text) {
		ServerChatNachricht cn = gson.fromJson(text, ServerChatNachricht.class);
		int authorId = cn.getDaten().getId();
		String message = cn.getDaten().getNachricht();
		//TODO Handle
	}

	/**
	 * handles the server messages
	 * @param text
	 */
	private void handleServerMsg(String text) {
		ServerantwortNachricht sn = gson.fromJson(text, ServerantwortNachricht.class);
		String answer = sn.getDaten();
		//TODO Handle
	}

	/**
	 * handles the welcome message
	 * @param text
	 */
	private void handleWelcome(String text) {
		WillkommenNachricht wn = gson.fromJson(text, WillkommenNachricht.class);
		int playerID = wn.getDaten();
		//TODO Handle
	}
	
	/**
	 * handles the first message send by the server
	 * @param text
	 */

	private void handleHello(String text) {
		HalloNachricht hn = gson.fromJson(text, HalloNachricht.class);
		VersionProtokollDaten vpData = (VersionProtokollDaten) hn.getDaten();
		String ver = vpData.getVersion();
		String prot = vpData.getProtokoll();
		//TODO Hello Handeln
	}

	/**
	 * Run-Method of Client Thread
	 */
	@Override
	public void run(){
		while(true){
			receive();
		}
	}
	
	/**
	 * sends end turn message to the server
	 */
	
	public void sendEndTurn(){
		sendText("{ \"Zug beenden\":{}}");
	}
	
	/**
	 * sends roll dice request
	 */
	
	public void sendRollDice(){
		sendText("{ \"Wuerfeln\":{}}");
	}
	
	/**
	 * sends start match request
	 */
	public void sendStartMatch(){
		sendText("{ \"Spiel starten\":{}}");
	}
	
	/**
	 * sends text for the chat
	 * @param text
	 */
	
	public void sendChat(String text){
		ClientChatDaten ccd = new ClientChatDaten(text);
		sendText("{ \"Chatnachricht senden\":" + gson.toJson(ccd)+ "}");
	}
	
	/**
	 * sends server handshake
	 */
	public void sendHello(){
		HalloNachricht HelloMessage = new HalloNachricht(version);
		sendText(gson.toJson(HelloMessage));
	}
	
	/**
	 * sends player initialize message
	 * @param name		name of the player
	 * @param color		color of the player
	 */
	
	public void sendPlayerInit(String name, String color){
		SpielerInitNachricht initMessage = new SpielerInitNachricht(name,color);
		sendText(gson.toJson(initMessage));
	}
	
	/**
	 * sends construct settlement request
	 * @param target		location of the settlment
	 */
	public void sendConstructSettlement(Vertex target){
		BauNachricht bn = new BauNachricht("Dorf", target);
		sendText(gson.toJson(bn));
	}
	
	/**
	 * sends construct city request
	 * @param target		location of the city
	 */
	public void sendConstructCity(Vertex target){
		BauNachricht bn = new BauNachricht("Stadt", target);
		sendText(gson.toJson(bn));
	}
	
	/**
	 * sends construct road request
	 * @param target		location of the road
	 */
	public void sendConstructRoad(Edge target){
		BauNachricht bn = new BauNachricht("Strasse", target);
		sendText(gson.toJson(bn));
	}
	
	public void sendSetRobber(int robbedPlayer){
		
		//sendText(gson.toJson());
	}
	
	
	public void sendStatusUpdate(){
		// for robber and maybe other stuff as well
		//sendText(gson.toJson());
	}
	
	
	public void sendMaritimeTrade(){
		
		//sendText(gson.toJson());
	}
	
	
	public void sendTradeOffer(){
		
		//sendText(gson.toJson());
	}
	
	
	public void sendAcceptTrade(int tradeID){
		
		//sendText(gson.toJson());
	}
	
	public void sendSuccessfullTrade(int tradeID, int tradePartnerID){
		
		//sendText(gson.toJson());
	}
	
	
	public void sendCancelTrade(int tradeId){
		
		//sendText(gson.toJson());
	}

	public static void main(String[] args){
		Client c = new Client("localhost", 4404);
	}
	
}
