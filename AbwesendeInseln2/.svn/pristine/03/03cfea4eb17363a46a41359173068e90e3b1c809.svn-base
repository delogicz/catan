package network;

import java.util.ArrayList;

/**
 * Class for Client queue message 
 * @author Felixi
 *
 */
public class ClientQueueHandler extends Thread{
	private ArrayList<String> messageQueue;
	private Client c;
	
	/**
	 * Constructor
	 * @param client
	 */
	public ClientQueueHandler(Client client){
		messageQueue = new ArrayList<String>();
		c = client;
	}
	
	/**
	 * Adds messages to queue
	 * @param message
	 */
	public void addMessage(String message){
		System.out.println("[Net]Added to Client Queue: " + message + " [Thread : "+ Thread.currentThread().getId() + "]");
		messageQueue.add(message);
	}
	/**
	 * Pops message every couple of miliseconds
	 */
	private void popMessage(){
		if(messageQueue.size() > 0){
			String s = messageQueue.get(0);
			messageQueue.remove(0);
			c.handleInput(s);
		}
	}
	
	/**
	 * Pops the messages
	 */
	public void run(){
		while(true){
			if(messageQueue.size() > 0){
					popMessage();
			}else{
				//Theoretisch pausieren, bis wieder neue nachricht angequeued wird 
				try {
					//zu viel spam
					//System.out.println("[Thr]Thread sleeps for 50ms [Thread : "+ Thread.currentThread().getId() + "]");
					Thread.sleep(50);
				} catch (InterruptedException e) {
					System.out.println("[Err]Thread.sleep throws InterruptedException:  " + e.getMessage() + " [Thread : "+ Thread.currentThread().getId() + "]");
				}
			}
		}
	}
}

