package bot;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import controller.LogMaster;
import game.Settings;
import javafx.application.Platform;
import jsonstructures.ConvertMaster;
import model.DevelopmentCardType;
import model.Edge;
import model.Player;
import model.PlayerClient;
import model.PlayerColor;
import model.ResourceType;
import model.Settlement;
import model.TerrainType;
import model.Tile;
import model.TokenNumber;
import model.Vertex;

/**
 * AI for playing catan
 * @author Daniel Panangian
 */
public class Bot extends PlayerClient {
	
	private BotBrain brain;
	private ArrayList<Tile> availableHexes;
	private ArrayList<Vertex> availableVertices;
	private ArrayList<Edge> availableEdges;
	private ArrayList<Vertex> verticesOwned;
	private ArrayList<Vertex> verticesConnected;
	private ArrayList<TerrainType> terrainsOwned;
	private ArrayList<TokenNumber> tokenOwned;
	private boolean buildingRoad;
	protected boolean buildingPhaseEnd;
	
	/**
	 * Constructor
	 * 
	 */
	public Bot(PlayerColor playerColor, int playerId, String name) {
		super(playerColor, playerId, name);
		brain = new BotBrain(this);
		LogMaster.log("[Bot]Bot " + name + " added."+ " [Thread : "+ Thread.currentThread().getId() + "]");
		availableVertices = new ArrayList<Vertex>();
		availableEdges = new ArrayList<Edge>();
		availableHexes = new ArrayList<Tile>();
	}
	
	public Bot(PlayerColor playerColor, int playerId, String name, String status) {
		super(playerColor, playerId, name,status);
		brain = new BotBrain(this);
		LogMaster.log("[Bot]Bot " + name + " added."+ " [Thread : "+ Thread.currentThread().getId() + "]");
		availableVertices = new ArrayList<Vertex>();
		availableEdges = new ArrayList<Edge>();
		availableHexes = new ArrayList<Tile>();
		verticesOwned = new ArrayList<Vertex>();
		verticesConnected = new ArrayList<Vertex>();
		terrainsOwned = new ArrayList<TerrainType>(); 
		tokenOwned = new ArrayList<TokenNumber>();
	}

	/**
	 * Updates the information of the player
	 * @param victoryPoints
	 * @param name
	 * @param status
	 * @param color
	 * @param resources
	 */
	@Override
	public void update(int victoryPoints, String name, String status, PlayerColor color,
			ArrayList<ResourceType> resources, int largestArmy, ArrayList<DevelopmentCardType> developmentCards) {
		this.victoryPoints = victoryPoints;
		this.name = name;
		this.status = status;
		this.playerColor = color;
		this.hand.updateHand(resources);
		this.resCardsCount = resources.size();
		this.knightCount = largestArmy;
		this.devCards = developmentCards; 
		Platform.runLater(new Runnable() { 
			@Override
			public void run() {
				playerControl.updateHandView();
				playerControl.disableAllButtons();
				switch(status){
					case Settings.DORF_BAUEN : buildSettlement(); break;
					case Settings.STRASSE_BAUEN: buildRoad(); break;
					case Settings.WUERFELN: rollDice(); break;
					case Settings.KARTEN_ABGEBEN: discardCard(); break;
					case Settings.RAEUBER_VERSETZEN: setRobber();
						endTurn(); 
						break;
					case Settings.HANDELN_BAUEN: 
						play();
						buildingPhaseEnd = true;
						break;
					case Settings.WARTEN: if(previousStatus.equals(Settings.KARTEN_ABGEBEN))catan.getGameManager().getApp().closeAllPopUpStages();
				}
			}
		});
		try {
			LogMaster.log("[Thr]Thread sleeps for 10ms [Thread : "+ Thread.currentThread().getId() + "]");
			Thread.sleep(Settings.SLEEP_SHORT);
		} catch (InterruptedException e) {
			LogMaster.log("[Exc]Thread.sleep throws InterruptedException:  " + e.getMessage() + " [Thread : "+ Thread.currentThread().getId() + "]");
		}
		
	}
	
	protected void play() {
		
		
		
		
		
		if (this.hand.canBuyCity()){
			if (!this.getSettlements().isEmpty()){
				buildCity(); 
			}
		}
		if (this.hand.canBuySettlement()){
			List<Vertex> targets = verticesConnected;
			Collections.shuffle(targets);
			for (Vertex target : targets){
				if (canBuildSettlement(target)){
					buildSettlement(target);
					break;
				}
			}
		}
		if (this.hand.canBuyRoad()) {
			boolean targetFound= false;
			List <Edge> targetedEdge = this.getLrPath();
			Collections.reverse(targetedEdge);
			for (Edge target : targetedEdge){
				for(Vertex v : target.getVertices()){
					for(Edge e: v.getEdges()){
						if(canBuildRoad(e)){
							buildRoad(e);
							targetFound = true;
							break;
						}
						if(targetFound)break;
					}
					if(targetFound)break;
				}
				if(targetFound)break;
			}
		}
		
//		tradeMaritime();
		
		
		
//		if (brain.getTargetVertex() != null){
//			brain.getTargetVertex().getSkin().getShape().setFill(Color.TRANSPARENT);
//		}
//		
//			brain.analyzeHexes();
//			brain.setTargetVertex(brain.getRankedVertex().get(0));
//			System.out.println("TARGET : " + brain.getTargetVertex());
//			brain.getTargetVertex().getSkin().getShape().setFill(this.getPlayerColor().getColor());
//		
//		
//		Map <Integer,Settlement> shortest = new HashMap <Integer,Settlement> ();
//		for (Settlement set :this.getSettlements()){
//			shortest.put(set.shortestPath(brain.getTargetVertex()).size(),set);
//		}
//		roadList = (shortest.get(Collections.min(shortest.keySet())) ).shortestPath(brain.getTargetVertex());
//		convertToEdges(roadList);
//		System.out.println("ROADLIST:");
//		System.out.println(roadList);
//		for(Vertex v:roadList){
//			v.getSkin().getShape().setFill(this.getPlayerColor().getColor());
//		}
//		
//		
//		
//		if (this.hand.canBuyCity()) buildCity(); 
//		if (this.hand.canBuySettlement() && roadList.size() == 1); this.buildSettlement(brain.getTargetVertex());
//		if (this.hand.canBuyDevCard()); 
//		if (this.hand.canBuyRoad()) { 
//			
//			 List<Edge> edgeList = convertToEdges(roadList);
//			 System.out.println("EDGE LIST : " + edgeList);
//			 
//			for(Road road : this.getRoads()){
//				int i = 0;
//				for (Edge edge : convertToEdges(roadList)){
//					if (road.getEdge().equals(edge)){
//						roadList.remove(i);
//						edgeList.remove(i);
//					}
//				}
//				
//			}
//			if(!edgeList.isEmpty()){
//				buildRoad(edgeList.get(0));
//			}
//				
//		}
		
		endTurn();
		
	}


	private void tradeMaritime() {
		for(ResourceType res: this.getHand().getResCards()){
			if(Collections.frequency(this.getHand().getResCards(), res) > 3){
				this.getCatan().getGameSkin().getTradeSkin().updateMaritimeButtons(this.getMaritimePrices(ResourceType.BRICK));
				
			}
		}
		
	}

	private ResourceType checkWhatToTrade() {
		List<ResourceType> resourceType = Arrays.asList(ResourceType.values());
		for(ResourceType res : resourceType){
			if(Collections.frequency(this.getHand().getResCards(), res) == 0){
				return res;
			}
		}
		Collections.shuffle(resourceType);
		return resourceType.get(0);
		
	}

	/**
	 * When a 7 is getting rolled and the Bot has more than 7 cards he has to discard cards with this method
	 */
	public void discardCard() {
		LogMaster.log("[Bot]Bot "+ name + " is trying to discard cards"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		int mustGiven = this.getResCards().size()/2;
		
	
		int lumberCount = 0 ;
		int brickCount = 0;
		int woolCount = 0;
		int grainCount = 0;
		int oreCount = 0;
		
		ArrayList<ResourceType> resCards = hand.getResCards();
		Collections.shuffle(resCards);
		
		for (ResourceType resource : resCards){
			switch (resource){
			case LUMBER	: lumberCount++;
			break;
			case BRICK	: brickCount++;
			break;
			case WOOL	: woolCount++;
			break;
			case GRAIN	: grainCount++;
			break;
			case ORE	: oreCount++;
			break;
			}
			mustGiven --;
			if (mustGiven == 0) break;
		}
		
		
		catan.getGameManager().getClient().sendGiveCards(lumberCount, 
				brickCount, woolCount, grainCount, oreCount);
		
	}
	
	/**
	 * When the Bot rolled a 7 he can rob another player this is the method he uses
	 */
	public void robbingVictim(Tile tile, ArrayList<Player> players) {
		final boolean SEVEN_DICED = status.equals(Settings.RAEUBER_VERSETZEN);
		LogMaster.log("[Bot]Bot "+ name + " is trying to rob"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		if(players.size() == 0){
			if(SEVEN_DICED) catan.getGameManager().getClient().sendSetRobber(tile, -1);
			else catan.getGameManager().getClient().sendPlayKnight(tile, -1);
		}
		else if(players.size() == 1){
			if(SEVEN_DICED) catan.getGameManager().getClient().sendSetRobber(tile, players.get(0).getPlayerID());
			else catan.getGameManager().getClient().sendPlayKnight(tile, players.get(0).getPlayerID());
		}
		else {
			int index = new Random().nextInt(players.size());
			if(SEVEN_DICED) catan.getGameManager().getClient().sendSetRobber(tile, players.get(index).getPlayerID());
			else catan.getGameManager().getClient().sendPlayKnight(tile, players.get(index).getPlayerID());
		}
	}


//	/**
//	 * activates bot if its the currentTurnTaker
//	 * 
//	 */
//	public void activateBot() {
//		rounds = catan.getRound();
//		active = false;
//		if (currentTurnTaker == this){
//			active = true;
//		}
//		while (active){
//			LogMaster.log("Bot "+ name +" taking turn" );
//			doStuff();
//		}
//		
//	}

//	/**
//	 * Playing scheme for the bot
//	 * 
//	 */
//	private void doStuff() {
//		if (rounds == 1 || rounds == 2 ){
//			buildSettlement();
//			buildRoad();
//			endTurn();
//		}
//		else {
//			rollDice();
//			if (relocateRobber == true){
//				LogMaster.log("Bot "+ name +" set Robber" );
//				setRobber();
//				endTurn();
//			}
//			else{
//			endTurn();
//			}
//		}
//	}

	/**
	 * Rolls the dice
	 */
	private void rollDice() {
		catan.getGameManager().getClient().sendRollDice();
		
	}

	/**
	 * Lets the Bot set the robber
	 */
	private void setRobber() {
		LogMaster.log("[Bot]Bot "+ name + " is trying to set the robber"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		brain.analyzeThreats();
		availableHexes.clear();
		
		for(Tile hex :catan.getIsland().getHexes()){
			if(!(hex.equals(getRobberTile()))){
			boolean myHex = false;
				for(Vertex vertex :hex.getVertices()){
					if(vertex.isOccupied()){
						Player owner = vertex.getOccupyingBuilding().getOwner();
						if(owner == catan.getPlayerClient()){
							myHex = true;
							break;
						}
					}
				}
				
				if(myHex == false){ 
						availableHexes.add(hex);
				}
			}
		}
		
		brain.analyzeHexesToRob();
		Tile newRobberPos = brain.getRankedHexes().get(0);
		
		ArrayList<Player> players = new ArrayList<Player>();
		
		for(Vertex vertex :newRobberPos.getVertices()){
			if(vertex.isOccupied()){
				Player owner = vertex.getOccupyingBuilding().getOwner();
				if(!players.contains(owner) && owner != catan.getPlayerClient()){
					players.add(owner);
				}
			}
		}
		robbingVictim(newRobberPos,players);
	}

	private Tile getRobberTile() {
		for(Tile hex :catan.getIsland().getHexes()){
			if(hex.getHasRobberOnIt()) return hex;
		}
		return null;
	}

	/**
	 * Ends the turn of the Bot
	 */
	private void endTurn() {
		LogMaster.log("[Bot]Bot "+ name + " is trying to end the turn"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		active = false;
		catan.getGameManager().getClient().sendEndTurn();
	}

	/**
	 * Builds a Road for the Bot
	 */
	private void buildRoad() {
		LogMaster.log("[Bot]Bot "+ name + " is trying to build a Road"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		checkAvailableEdges();
		Collections.shuffle(availableEdges);
		Edge space = availableEdges.get(0);
			
		space.getCatan().getGameManager().getClient().sendConstructRoad(space);
		for(Vertex vertex : space.getVertices()){
			if(vertex.getOccupyingBuilding() != null){
				if(!verticesConnected.contains(vertex)) verticesConnected.add(vertex);
			}
		}
		availableEdges.clear();	
		}
	
	/**
	 * Builds a Road for the Bot
	 */
	private void buildRoad(Edge e) {
		LogMaster.log("[Bot]Bot "+ name + " is trying to build a Road"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		Edge space = e;
		space.getCatan().getGameManager().getClient().sendConstructRoad(space);
		}
		

	/**
	 * Builds a settlment for the Bot
	 */
	private void buildSettlement() {
		checkAvailableVertex();
		//System.out.println(availableVertices);
		brain.analyzeHexes();
		
		boolean canBuildSettlement = false;
		int i = 0;
		while(!canBuildSettlement){
			LogMaster.log("[Bot]Bot "+ name + " is trying to build Settlement" +" [Thread : "+ Thread.currentThread().getId() + "]");
			Vertex space = brain.getRankedVertex().get(i);
			if(canBuildSettlement(space)){
				space.getCatan().getGameManager().getClient().sendConstructSettlement(space);
				if (verticesConnected.contains(space)) verticesConnected.remove(space);
				verticesOwned.add(space);
				for(Tile hex :space.getHexes()){
					tokenOwned.add(hex.getToken());
					terrainsOwned.add(hex.getTerrainType());
				}
				canBuildSettlement = true;
			}
			i++;
		}
	}
	
	
	/**
	 * Builds a settlment for the Bot
	 */
	private void buildCity() {
			
			LogMaster.log("[Bot]Bot "+ name + " is trying to build City" +" [Thread : "+ Thread.currentThread().getId() + "]");
			int index = (int)(Math.random()* this.getSettlements().size());
			Settlement space = this.getSettlements().get(index);
			
			this.getCatan().getGameManager().getClient().sendConstructCity(space.getVertex());
		}
	
	/**
	 * Builds a settlment for the Bot
	 */
	private void buildSettlement(Vertex v) {
		
			LogMaster.log("[Bot]Bot "+ name + " is trying to build Settlement" +" [Thread : "+ Thread.currentThread().getId() + "]");
			Vertex space = v;
			if(canBuildSettlement(space)){
				space.getCatan().getGameManager().getClient().sendConstructSettlement(space);
				verticesOwned.add(space);
				for(Tile hex :space.getHexes()){
					tokenOwned.add(hex.getToken());
				
		}
			}
	}
		

	/**
	 * check empty vertices
	 * 
	 */
	public void checkAvailableVertex() {
		if(!availableVertices.isEmpty()) {
			for (Vertex vertex:catan.getIsland().getVertices()){
				boolean zero = true;
				if (!vertex.isOccupied()){
					for(Edge edge : vertex.getEdges()){
						if (edge.getOccupyingBuilding() != null) 
							zero = false;
							break;
						}
				}
				else zero = false;
				if (zero == false) availableVertices.remove(vertex);
			}
			
		}
		else{
			for (Vertex vertex:catan.getIsland().getVertices()){
				boolean zero = true;
				if (!vertex.isOccupied()){
					for(Edge edge : vertex.getEdges()){
						if (edge.getOccupyingBuilding() != null) 
							zero = false;
					break;
					}
				
				}
				else zero = false;
				if (zero == true) availableVertices.add(vertex);
			}
		}
	}
	/**
	 * check empty edges
	 * 
	 */
	public void checkAvailableEdges() {
			int index = catan.getPlayerClient().getSettlements().size() - 1;
			Settlement lastSettlement = catan.getPlayerClient().getSettlements().get(index);
			for (Edge edge: lastSettlement.getVertex().getEdges() ){
				if (!edge.isOccupied()){
					availableEdges.add(edge);
				}
			}
	}
	
	/**
	 * returns true if a player is a bot
	 * 
	 */
	public boolean isBot(){
		return true;
	}
	/**
	 * pause robot brain recreating human way of thinking
	 * 
	 */
	@SuppressWarnings("unused")
	private void pause(int seconds){
		try {
			LogMaster.log("[Thr]Thread sleeps for "+1000*seconds+"ms [Thread : "+ Thread.currentThread().getId() + "]");
		    Thread.sleep(1000 * seconds);                
		} catch(InterruptedException ex) {
			LogMaster.log("[Exc]Thread.sleep throws InterruptedException:  " + ex.getMessage() + " [Thread : "+ Thread.currentThread().getId() + "]");
		    Thread.currentThread().interrupt();
		}		
	}
	
	private List<Edge> convertToEdges(List<Vertex> roadList) {
		List<Edge> edges = new LinkedList<Edge>();
		for (int i = 0; i < roadList.size() - 1; i++){
			Vertex from = roadList.get(i);
			Vertex to = roadList.get(i + 1);
			
			Edge path = null;
			for (Edge edge :from.getEdges()){
				if (edge.getVertexFrom() == to || edge.getVertexFrom() == from ) {
					path = edge;
					break;
				}
			}
			
			edges.add(path);
			
		}
		return edges;
					
		
	}
	/**
	 * @return availableVertices
	 * 
	 */
	public ArrayList<Vertex> getAvailableVertices() {
		return availableVertices;
	}
	/**
	 * @return verticesOwned
	 * 
	 */
	public ArrayList<Vertex> getVerticesOwned() {
		return verticesOwned;
	}
	/**
	 * @return terrainsOwned
	 * 
	 */
	public ArrayList<TerrainType> getTerrainsOwned() {
		return terrainsOwned;
	}
	/**
	 * @return tokenOwned
	 * 
	 */
	public ArrayList<TokenNumber> getTokenOwned() {
		return tokenOwned;
	}

	public ArrayList<Tile> getAvailableHexes() {
		return availableHexes;
	}

	public boolean isBuildingPhaseEnd() {
		return buildingPhaseEnd;
	}

}
