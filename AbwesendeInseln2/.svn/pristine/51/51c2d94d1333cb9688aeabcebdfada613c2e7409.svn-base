package network;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;
/**
 * Handler der Kommunikation zwischen Server und einem Client
 * @author georgschwab
 *
 */
public class Handler extends Thread{
	private Socket client;
	private Server server;
	private int clientId;
	
	/**
	 * Erstellt neuen Handler für angegebenen Client
	 * @param cliend Client, mit dem der Server über den Handler kommunizieren will
	 * @param servr Server
	 */
	public Handler(Socket cliend, Server servr){
		client = cliend;
		server = servr;
		server.sendHello(this);
		System.out.println("Started Handler");
	}
	
	@Override
	/**
	 * Empfängt und verarbeitet nachrichten vom angehängten Client
	 */
	public void run(){
		Scanner in = null;
		while(!client.isClosed()){
			try {
				in = new Scanner(client.getInputStream());
				String text = in.nextLine();
				if(text != null){
					System.out.println("Handler " + clientId + " got: " + text);
					server.handleInput(text,this);
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		in.close();
	}	

	/**
	 * Schick eine Nachricht an den angehängten Client
	 * @param message
	 */
	public void sendMessage(String message) {
		System.out.println("Handler "+clientId+" sends: " + message);
		try {
		PrintWriter out;
		out = new PrintWriter( client.getOutputStream(), true );
		out.println(message);
		} catch (IOException e) {
			e.printStackTrace();
		}
		/*
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
	}
	
	/**
	 * Sends the message to only the client with the right id
	 * @param targetId			client id
	 * @param message			message
	 */
	public void sendIf(int targetId,String message){
		if(clientId==targetId){
			sendMessage(message);
		}
	}
	
	/**
	 * Sends the message to all clients but not to the one with the right ID
	 * @param targetId			client id not to send the message
	 * @param message
	 */
	public void sendIfNot(int targetId,String message){
		if(clientId!=targetId){
			sendMessage(message);
		}
	}
	
	
	/**
	 * Closes the connection between client and server
	 */
	public void close(){
		try {
			client.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Setter for clientId
	 * @param id
	 */
	public void setId(int id){
		this.clientId = id;
	}
	
	/**
	 * Getter for clientId
	 * @return
	 */
	public int getClientId(){
		return clientId;
	}
}
