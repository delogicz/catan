package view;

import java.net.URISyntaxException;

import game.Settings;
import javafx.geometry.Pos;
import javafx.scene.image.Image;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import model.Player;
import model.PlayerClient;

public class PlayerBox extends VBox {
	private String path;
	private Text set,rd,vp,kn,cards;
	private Player player;
	
	public PlayerBox(PlayerClient player,int num){
		this.player = player;
		Rectangle pic = new Rectangle(Settings.GAME_SKIN_WIDTH / 4,0.7 * Settings.SCALE);
		try {
			path = TokenNumberSkin.class.getResource("/img/character"+num+".jpg" ).toURI().toString();
			
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
		Image image = new Image(path);
		ImagePattern imagePattern = new ImagePattern(image);
		pic.setFill(imagePattern);
		pic.setStroke(Color.BLACK);
		
		StackPane stack = new StackPane();
		
		Rectangle bkg = new Rectangle(Settings.GAME_SKIN_WIDTH / 4,0.25 * Settings.SCALE);
		bkg.setFill(Color.BLACK);
		bkg.setStroke(Color.BLACK);
		bkg.setOpacity(0.3);
		
		HBox stats = new HBox ();
		set = new Text("SET : "+ player.getSettlements().size());
		set.setFill(player.getPlayerColor().getColor());
		rd = new Text("RD : "+ player.getRoads().size());
		rd.setFill(player.getPlayerColor().getColor());
		vp = new Text("VP : "+ player.getVictoryPoints());
		vp.setFill(player.getPlayerColor().getColor());
		kn = new Text("KN : "+ 0);
		kn.setFill(player.getPlayerColor().getColor());
		cards = new Text ("CARDS: " + 0);
		cards.setFill(player.getPlayerColor().getColor());
		
		stats.getChildren().addAll(set,rd,vp,kn,cards);
		stats.setSpacing(5);
		
		stack.getChildren().addAll(bkg,stats);
		
		getChildren().addAll(pic,stack);
	}
	
	public PlayerBox(Player player,int num){
		this.player = player;
		Rectangle pic = new Rectangle(Settings.GAME_SKIN_WIDTH / 4,0.7 * Settings.SCALE);
		try {
			path = TokenNumberSkin.class.getResource("/img/character"+num+".jpg" ).toURI().toString();
			
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
		Image image = new Image(path);
		ImagePattern imagePattern = new ImagePattern(image);
		pic.setFill(imagePattern);
		pic.setStroke(Color.BLACK);
		
		StackPane stack = new StackPane();
		
		Rectangle bkg = new Rectangle(Settings.GAME_SKIN_WIDTH / 4,0.25 * Settings.SCALE);
		bkg.setFill(Color.BLACK);
		bkg.setStroke(Color.BLACK);
		bkg.setOpacity(0.3);
		
		HBox stats = new HBox ();
//		set = new Text("SET : "+ 0);
//		set.setFill(player.getPlayerColor().getColor());
//		rd = new Text("RD : "+ 0);
//		rd.setFill(player.getPlayerColor().getColor());
		vp = new Text("VP : "+ player.getVictoryPoints());
		vp.setFill(player.getPlayerColor().getColor());
//		kn = new Text("KN : "+ 0);
//		kn.setFill(player.getPlayerColor().getColor());
		cards = new Text ("CARDS: " + player.getResCardsCount());
		cards.setFill(player.getPlayerColor().getColor());
		
		stats.getChildren().addAll(vp,cards);
		stats.setSpacing(10);
		stats.setAlignment(Pos.CENTER);
		
		stack.getChildren().addAll(bkg,stats);
		
		getChildren().addAll(pic,stack);
	}
	public void update(){
		vp.setText("VP : "+ player.getVictoryPoints());
		cards.setText("CARDS: " + player.getResCardsCount());
		
	}
	public Text getSet() {
		return set;
	}
	public void setSet(Text set) {
		this.set = set;
	}
	public Text getRd() {
		return rd;
	}
	public void setRd(Text rd) {
		this.rd = rd;
	}
	public Text getVp() {
		return vp;
	}
	public void setVp(Text vp) {
		this.vp = vp;
	}
	public Text getKn() {
		return kn;
	}
	public void setKn(Text kn) {
		this.kn = kn;
	}
	public Text getCards() {
		return cards;
	}
	public void setCards(Text cards) {
		this.cards = cards;
	}
}
