package view;

import java.net.InetAddress;
import java.net.UnknownHostException;
import controller.LogMaster;
import controller.ServerControl;
import game.GameManager;
import game.Settings;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;

/**
 * The Login View to create a Client
 * @author Stefanie Kloss
 *
 */
public class ClientLogin extends StackPane{
	
	private GameManager gameManager;
	private String myIP;

	/**
	 * Constructor
	 * @param gameManager
	 */
	public ClientLogin(GameManager gameManager){
		
		super();
		this.gameManager = gameManager;
		
		setStyle("-fx-background-color: darkred; -fx-padding: 10;");
		getIpAdress();
		addElements();
		
	}
	
	/**
	 * Adds text, textfields, buttons, etc
	 */
	private void addElements() {

		Text welcome = new Text("Welcome to Settlers of Catan");
		welcome.setFill(Color.ANTIQUEWHITE);
		welcome.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.GIANT_FONT_SIZE));
		Text asClient = new Text("Log in as Client");
		asClient.setFill(Color.ANTIQUEWHITE);
		asClient.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.HUGE_FONT_SIZE));
		Text host = new Text("Host:            ");
		host.setFill(Color.ANTIQUEWHITE);
		host.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		TextField enterHost = new TextField();
		enterHost.setText("localhost");
		enterHost.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		HBox hBoxHost = new HBox();
		hBoxHost.getChildren().addAll(host, enterHost);
		hBoxHost.setAlignment(Pos.BASELINE_LEFT);
		
		Text port = new Text("Port:            ");
		port.setFill(Color.ANTIQUEWHITE);
		port.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		TextField enterPort = new TextField();
		enterPort.setText("5506");
		enterPort.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		HBox hBoxPort = new HBox();
		hBoxPort.getChildren().addAll(port, enterPort);
		hBoxPort.setAlignment(Pos.BASELINE_LEFT);
		
		Button loginButton = new Button("Login as Client");
		loginButton.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		
		Button loginButtonBot = new Button("Login as BotClient");
		loginButtonBot.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		
		loginButton.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			public void handle(ActionEvent event) {
				try{
					int portInt = Integer.parseInt(enterPort.getText());
					try {
						gameManager.initializeClient(enterHost.getText(), portInt);
					}catch(Exception e){
						LogMaster.logExc("[Exc]Connection to " + enterHost.getText()+":"+portInt+" was refused.");
						gameManager.getApp().popUpMessage("The connection was refused.\nPlease try again.");
					}
					
				}catch(Exception e){
					gameManager.getApp().popUpMessage("The port must consist out of numbers.");
				}
			}
		});

		loginButtonBot.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			public void handle(ActionEvent event) {
				try{
					int portInt = Integer.parseInt(enterPort.getText());
					try {
						gameManager.initializeBotClient(enterHost.getText(), portInt);
					}catch(Exception e){
						gameManager.getApp().popUpMessage("The connection was refused.\nPlease try again.");
					}
				}catch(Exception e){
					gameManager.getApp().popUpMessage("The port must consist out of numbers.");
				}
			}
		});
		Button logLevel = new Button("Log Level");
		logLevel.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		
		logLevel.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			public void handle(ActionEvent event) {
				new LogLevelView();
			}
		});
		
		Text myHostIP = new Text("Your IP: " + myIP);
		myHostIP.setFill(Color.ANTIQUEWHITE);
		myHostIP.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		HBox hBoxIP = new HBox();
		hBoxIP.getChildren().addAll(myHostIP);
		hBoxIP.setAlignment(Pos.BASELINE_LEFT);
		
		Text orServer = new Text("Or host your own Server");
		orServer.setFill(Color.ANTIQUEWHITE);
		orServer.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.HUGE_FONT_SIZE));
		Text textPort = new Text("Port:            ");
		textPort.setFill(Color.ANTIQUEWHITE);
		textPort.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		TextField serverPort = new TextField();
		serverPort.setText("5506");
		serverPort.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		
		HBox serverBox = new HBox();
		serverBox.getChildren().addAll(textPort, serverPort);
		serverBox.setAlignment(Pos.BASELINE_LEFT);
		Button startServer = new Button("Start Server");
		startServer.setFont(Font.loadFont(Settings.OSWALD_PATH, Settings.BIG_FONT_SIZE));
		
		startServer.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			public void handle(ActionEvent event) {
				try{
					LogMaster.log("[Thr]Launched ServerApp [Thread : "+ Thread.currentThread().getId() + "]");
					LogMaster.log("[Thr]Initializing Server [Thread : "+ Thread.currentThread().getId() + "]");
					int port = Integer.parseInt(serverPort.getText());
					new ServerControl(port);
					startServer.setDisable(true);
				}catch(Exception e){
					gameManager.getApp().popUpMessage("Failed to start the server");
				}
			}
		});
		
		GridPane grid = new GridPane();
		grid.add(welcome, 0, 0, 2, 1);
		GridPane.setHalignment(welcome, HPos.CENTER);
		grid.add(asClient, 0, 1);
		grid.add(hBoxHost, 0, 2);
		grid.add(hBoxPort, 0, 3);
		grid.add(loginButton, 0, 4);
		grid.add(loginButtonBot, 0, 5);
		grid.add(orServer, 1, 1);
		grid.add(hBoxIP, 1, 2);
		grid.add(serverBox, 1, 3);
		grid.add(startServer, 1, 4);
		grid.add(logLevel, 1, 5);

		grid.setVgap(30);
		grid.setHgap(70);

		setMargin(grid, new Insets(30,40,40,40));
		getChildren().addAll(grid);	
		
	}
	
	/**
	 * Getter for ipAdress
	 */
	private void getIpAdress(){
        try {
            myIP = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException ex) {
        	myIP = "unknown";
            ex.printStackTrace();
        }
    }

}