package jsonstructures;

import java.util.ArrayList;
import java.util.List;

import model.Harbour;
import model.Island;
import model.TerrainType;
import model.Tile;
import model.TokenNumber;
import model.Vertex;

/**
 * This class is for the map of the island to initialize it
 * @author Felixi
 *
 */
public class KartenDaten {
	private FeldDaten[] Felder;
	private GebaeudeDaten[] Gebaeude;
	private HafenDaten[] Haefen;
	private String Raeuber;
	
	
	/**
	 * Creates a KartenDaten object and initializes the map
	 * @param felder		array of tiles
	 * @param gebaeude		array of buildings
	 * @param haefen		array of harbors
	 * @param raeuber		position of the robber
	 */
	public KartenDaten(FeldDaten[] felder, GebaeudeDaten[] gebaeude, HafenDaten[] haefen, String raeuber) {
		Felder = felder;
		Gebaeude = gebaeude;
		Haefen = haefen;
		Raeuber = raeuber;
	}

	public KartenDaten(Island i) {
		String Raeuber = ConvertMaster.convertTile(i.getRobber().getTile());
		
		List<Vertex> harbourVertices = getHarbours(i);
		Haefen = new HafenDaten[harbourVertices.size()];
		for(int s = 0; s < harbourVertices.size(); s++){
			String ort = ConvertMaster.convertVertex(harbourVertices.get(s));
			Harbour h = harbourVertices.get(s).getHarbour();
			String typ = null;
			switch(h){
			case THREETOONE: 		typ = "Hafen"; break;
			case TWOTOONEBRICK: 	typ = "Lehm Hafen"; break;
			case TWOTOONEGRAIN:		typ = "Getreide Hafen"; break;
			case TWOTOONELUMBER:	typ = "Holz Hafen"; break;
			case TWOTOONEORE:		typ = "Erz Hafen"; break;
			case TWOTOONEWOOL:		typ = "Wolle Hafen"; break;
			}
			Haefen[s] = new HafenDaten(ort,typ);
		}
		
		Gebaeude = new GebaeudeDaten[0];
		List<Tile> felder= i.getHexes();
		Felder = new FeldDaten[felder.size()+18]; //For 18 sea tiles around
		for(int j = 0; j < felder.size();j++){
			String ort = ConvertMaster.convertTile(felder.get(j));
			String typ = ConvertMaster.convertTerrain(felder.get(j).getTerrainType());
			int zahl = felder.get(j).getToken().getNumber();
			Felder[j] = new FeldDaten(ort,typ,zahl);
		}
		String abc = "abcdefghijklmnopqr";
		for(int k = felder.size();k < felder.size()+18;k++){
			Felder[k] = new FeldDaten(abc.charAt(k-(felder.size()))+"","Meer",0);
		}
	}

	/**
	 * Getter for the Tiles
	 * @return
	 */
	public TerrainType[] getFeldTypen() {
		TerrainType[] feldTyp = new TerrainType[Felder.length-18];
		int tmp = 0;
		for(FeldDaten feld : Felder){
			if(feld.istMeer()){
				tmp++;
			}else{
				feldTyp[feld.getOrtNum()-tmp] = feld.getTyp();
			}
		}
		return feldTyp;
	}
	
	/**
	 * Getter for The token numbers
	 * @return
	 */
	public TokenNumber[] getFeldZahlen(){
		TokenNumber[] feldZahl = new TokenNumber[Felder.length-18];
		int tmp = 0;
		for(FeldDaten feld : Felder){
			if(feld.istMeer()){
				tmp++;
			}else{
				feldZahl[feld.getOrtNum()-tmp] = feld.getZahl();
			}
		}
		return feldZahl;
	}

	/**
	 * Setter for the tiles
	 * @param felder
	 */
	public void setFelder(FeldDaten[] felder) {
		Felder = felder;
	}

	/**
	 * Getter for the GebaeudeDaten
	 * @return
	 */
	public GebaeudeDaten[] getGebaeude() {
		return Gebaeude;
	}

	/**
	 * Setter for the GebaeudeDaten
	 * @param gebaeude
	 */
	public void setGebaeude(GebaeudeDaten[] gebaeude) {
		Gebaeude = gebaeude;
	}

	/**
	 * Getter for the HafenDaten
	 * @return
	 */
	public HafenDaten[] getHaefen() {
		return Haefen;
	}

	/**
	 * Setter for the HafenDaten
	 * @param haefen
	 */
	public void setHaefen(HafenDaten[] haefen) {
		Haefen = haefen;
	}

	/**
	 * Getter for the Raeuber
	 * @return
	 */
	public String getRaeuber() {
		return Raeuber;
	}

	/**
	 * Setter for the Raeuber
	 * @param raeuber
	 */
	public void setRaeuber(String raeuber) {
		Raeuber = raeuber;
	}
	
	/**
	 * Checks if a vertex is a harbor and returns a list of all harbors on the island
	 * @param island
	 * @return
	 */
	
	public ArrayList<Vertex> getHarbours(Island island){
		List<Vertex> vertices = island.getVertices();
		ArrayList<Vertex> harbourVertices = new ArrayList<Vertex>();
		for(Vertex v : vertices){
			if(v.getHarbour()!=null){
				harbourVertices.add(v);
			}
		}
		return harbourVertices;
	}
	
}
