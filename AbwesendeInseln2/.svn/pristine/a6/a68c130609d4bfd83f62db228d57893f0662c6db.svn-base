package bot;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import controller.LogMaster;
import game.Settings;
import javafx.application.Platform;
import model.DevelopmentCardType;
import model.Edge;
import model.Hand;
import model.Player;
import model.PlayerClient;
import model.PlayerColor;
import model.ResourceType;
import model.Settlement;
import model.TerrainType;
import model.Tile;
import model.TokenNumber;
import model.Vertex;

/**
 * AI for playing catan
 * @author Daniel Panangian
 */
public class Bot extends PlayerClient {
	
	private BotBrain brain;
	private boolean canBuildCity;
	
	private int rounds;
	private ArrayList<Tile> availableHexes;
	private ArrayList<Vertex> availableVertices;
	private ArrayList<Edge> availableEdges;
	private ArrayList<Vertex> verticesOwned;
	private ArrayList<TerrainType> terrainsOwned;
	private ArrayList<TokenNumber> tokenOwned;
	/**
	 * Constructor
	 * 
	 */
	public Bot(PlayerColor playerColor, int playerId, String name) {
		super(playerColor, playerId, name);
		brain = new BotBrain(this);
		LogMaster.log("[Bot]Bot " + name + " added."+ " [Thread : "+ Thread.currentThread().getId() + "]");
		availableVertices = new ArrayList<Vertex>();
		availableEdges = new ArrayList<Edge>();
		availableHexes = new ArrayList<Tile>();
	}
	
	public Bot(PlayerColor playerColor, int playerId, String name, String status) {
		super(playerColor, playerId, name,status);
		brain = new BotBrain(this);
		LogMaster.log("[Bot]Bot " + name + " added."+ " [Thread : "+ Thread.currentThread().getId() + "]");
		availableVertices = new ArrayList<Vertex>();
		availableEdges = new ArrayList<Edge>();
		availableHexes = new ArrayList<Tile>();
		verticesOwned = new ArrayList<Vertex>();
		terrainsOwned = new ArrayList<TerrainType>(); 
		tokenOwned = new ArrayList<TokenNumber>();
	}

	/**
	 * Updates the information of the player
	 * @param victoryPoints
	 * @param name
	 * @param status
	 * @param color
	 * @param resources
	 */
	@Override
	public void update(int victoryPoints, String name, String status, PlayerColor color,
			ArrayList<ResourceType> resources, int largestArmy, ArrayList<DevelopmentCardType> developmentCards) {
		this.victoryPoints = victoryPoints;
		this.name = name;
		this.status = status;
		this.playerColor = color;
		this.hand.updateHand(resources);
		this.resCardsCount = resources.size();
		this.knightCount = largestArmy;
		this.devCards = developmentCards; 
		Platform.runLater(new Runnable() { 
			@Override
			public void run() {
				playerControl.updateHandView();
				playerControl.disableAllButtons();
				switch(status){
					case "Dorf bauen": buildSettlement(); break;
					case "Strasse bauen": buildRoad(); break;
					case "Wuerfeln": rollDice(); break;
					case "Karten wegen Raeuber abgeben": discardCard(); break;
					case "Raeuber versetzen": setRobber();
						endTurn(); 
						break;
					case "Handeln oder Bauen": endTurn(); break;
				}
			}
		});
		try {
			LogMaster.log("[Thr]Thread sleeps for 10ms [Thread : "+ Thread.currentThread().getId() + "]");
			Thread.sleep(10);
		} catch (InterruptedException e) {
			LogMaster.log("[Err]Thread.sleep throws InterruptedException:  " + e.getMessage() + " [Thread : "+ Thread.currentThread().getId() + "]");
		}
		
	}
	
	/**
	 * When a 7 is getting rolled and the Bot has more than 7 cards he has to discard cards with this method
	 */
	public void discardCard() {
		LogMaster.log("[Bot]Bot "+ name + " is trying to discard cards"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		int mustGiven = this.getResCards().size()/2;
		
	
		int lumberCount = 0 ;
		int brickCount = 0;
		int woolCount = 0;
		int grainCount = 0;
		int oreCount = 0;
		
		ArrayList<ResourceType> resCards = hand.getResCards();
		Collections.shuffle(resCards);
		
		for (ResourceType resource : resCards){
			switch (resource){
			case LUMBER	: lumberCount++;
			break;
			case BRICK	: brickCount++;
			break;
			case WOOL	: woolCount++;
			break;
			case GRAIN	: grainCount++;
			break;
			case ORE	: oreCount++;
			break;
			}
			mustGiven --;
			if (mustGiven == 0) break;
		}
		
		
		catan.getGameManager().getClient().sendGiveCards(lumberCount, 
				brickCount, woolCount, grainCount, oreCount);
		
	}
	
	/**
	 * When the Bot rolled a 7 he can rob another player this is the method he uses
	 */
	public void robbingVictim(Tile tile, ArrayList<Player> players) {
		final boolean SEVEN_DICED = status.equals(Settings.RAEUBER_VERSETZEN);
		LogMaster.log("[Bot]Bot "+ name + " is trying to rob"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		if(players.size() == 0){
			if(SEVEN_DICED) catan.getGameManager().getClient().sendSetRobber(tile, -1);
			else catan.getGameManager().getClient().sendPlayKnight(tile, -1);
		}
		else if(players.size() == 1){
			if(SEVEN_DICED) catan.getGameManager().getClient().sendSetRobber(tile, players.get(0).getPlayerID());
			else catan.getGameManager().getClient().sendPlayKnight(tile, players.get(0).getPlayerID());
		}
		else {
			int index = new Random().nextInt(players.size());
			if(SEVEN_DICED) catan.getGameManager().getClient().sendSetRobber(tile, players.get(index).getPlayerID());
			else catan.getGameManager().getClient().sendPlayKnight(tile, players.get(index).getPlayerID());
		}
	}


//	/**
//	 * activates bot if its the currentTurnTaker
//	 * 
//	 */
//	public void activateBot() {
//		rounds = catan.getRound();
//		active = false;
//		if (currentTurnTaker == this){
//			active = true;
//		}
//		while (active){
//			LogMaster.log("Bot "+ name +" taking turn" );
//			doStuff();
//		}
//		
//	}

//	/**
//	 * Playing scheme for the bot
//	 * 
//	 */
//	private void doStuff() {
//		if (rounds == 1 || rounds == 2 ){
//			buildSettlement();
//			buildRoad();
//			endTurn();
//		}
//		else {
//			rollDice();
//			if (relocateRobber == true){
//				LogMaster.log("Bot "+ name +" set Robber" );
//				setRobber();
//				endTurn();
//			}
//			else{
//			endTurn();
//			}
//		}
//	}

	/**
	 * Rolls the dice
	 */
	private void rollDice() {
		catan.getGameManager().getClient().sendRollDice();
		
	}

	/**
	 * Lets the Bot set the robber
	 */
	private void setRobber() {
		LogMaster.log("[Bot]Bot "+ name + " is trying to set the robber"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		availableHexes.clear();
		for(Tile hex :catan.getIsland().getHexes()){
			boolean myHex = false;
			
			for(Vertex vertex :hex.getVertices()){
				if(vertex.isOccupied()){
					Player owner = vertex.getOccupyingBuilding().getOwner();
					if(owner == catan.getPlayerClient()){
						myHex = true;
						break;
					}
				}
			}
			
			if(myHex == false){ 
					availableHexes.add(hex);
			}
		}
		
		
		int index = new Random().nextInt(availableHexes.size());
		Tile newRobberPos = catan.getIsland().getHexes().get(index);
		
		ArrayList<Player> players = new ArrayList<Player>();
		
		for(Vertex vertex :newRobberPos.getVertices()){
			if(vertex.isOccupied()){
				Player owner = vertex.getOccupyingBuilding().getOwner();
				if(!players.contains(owner) && owner != catan.getPlayerClient()){
					players.add(owner);
				}
			}
		}
		robbingVictim(newRobberPos,players);
	}

	/**
	 * Ends the turn of the Bot
	 */
	private void endTurn() {
		LogMaster.log("[Bot]Bot "+ name + " is trying to end the turn"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		active = false;
		catan.getGameManager().getClient().sendEndTurn();
	}

	/**
	 * Builds a Road for the Bot
	 */
	private void buildRoad() {
		LogMaster.log("[Bot]Bot "+ name + " is trying to build a Road"+" [Thread : "+ Thread.currentThread().getId() + "]" );
		checkAvailableEdges();
		Collections.shuffle(availableEdges);
		Edge space = availableEdges.get(0);
			
			space.getCatan().getGameManager().getClient().sendConstructRoad(space);
			availableEdges.clear();	
		}
		

	/**
	 * Builds a settlment for the Bot
	 */
	private void buildSettlement() {
		checkAvailableVertex();
		brain.analyzeHexes();
		boolean canBuildSettlement = false;
		int i = 0;
		while(!canBuildSettlement){
			LogMaster.log("[Bot]Bot "+ name + " is trying to build Settlement" +" [Thread : "+ Thread.currentThread().getId() + "]");
			Vertex space = brain.getRankedVertex().get(i);
			if(canBuildSettlement(space)){
				space.getCatan().getGameManager().getClient().sendConstructSettlement(space);
				verticesOwned.add(space);
				for (Vertex v :verticesOwned){
					for(Tile hex :v.getHexes()){
						tokenOwned.add(hex.getToken());
						terrainsOwned.add(hex.getTerrainType());
					}
				}
				canBuildSettlement = true;
			}
			i++;
		}
	}
		

	/**
	 * check empty vertices
	 * 
	 */
	private void checkAvailableVertex() {
		for (Vertex vertex:catan.getIsland().getVertices()){
			if (!vertex.isOccupied()){
				availableVertices.add(vertex);
			}
			else {
				brain.getRankedVertex().remove(vertex);
			}
		}
		
	}
	/**
	 * check empty edges
	 * 
	 */
	private void checkAvailableEdges() {
			int index = catan.getPlayerClient().getSettlements().size() - 1;
			Settlement lastSettlement = catan.getPlayerClient().getSettlements().get(index);
			for (Edge edge: lastSettlement.getVertex().getEdges() ){
				if (!edge.isOccupied()){
					availableEdges.add(edge);
				}
			}
	}
	
	/**
	 * returns true if a player is a bot
	 * 
	 */
	public boolean isBot(){
		return true;
	}
	/**
	 * pause robot brain recreating human way of thinking
	 * 
	 */
	private void pause(int seconds){
		try {
			LogMaster.log("[Thr]Thread sleeps for "+1000*seconds+"ms [Thread : "+ Thread.currentThread().getId() + "]");
		    Thread.sleep(1000 * seconds);                
		} catch(InterruptedException ex) {
			LogMaster.log("[Err]Thread.sleep throws InterruptedException:  " + ex.getMessage() + " [Thread : "+ Thread.currentThread().getId() + "]");
		    Thread.currentThread().interrupt();
		}		
	}
	/**
	 * @return availableVertices
	 * 
	 */
	public ArrayList<Vertex> getAvailableVertices() {
		return availableVertices;
	}
	/**
	 * @return verticesOwned
	 * 
	 */
	public ArrayList<Vertex> getVerticesOwned() {
		return verticesOwned;
	}
	/**
	 * @return terrainsOwned
	 * 
	 */
	public ArrayList<TerrainType> getTerrainsOwned() {
		return terrainsOwned;
	}
	/**
	 * @return tokenOwned
	 * 
	 */
	public ArrayList<TokenNumber> getTokenOwned() {
		return tokenOwned;
	}

}
