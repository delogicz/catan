package model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import game.Settings;
import javafx.application.Platform;
import jsonstructures.ConvertMaster;
import view.HarbourSkin;
import view.IslandSkin;

/**
 * Represents the island of Catan. Contains all tiles, edges and vertices.
 * @author Daniel Panangian, Stefanie Kloss
 */
public class Island {
	
	private List<Vertex> vertices;
	private List<Edge> edges;
	
	private Catan catan;
	
	private final IslandSkin skin;
	public static final int[] hexagonsPerRow = Settings.HEXAGON_LAYOUT;
	public static final int[] verticesPerRow = Settings.VERTEX_LAYOUT;

	private List<Tile> boardHexes;
	
	private List<TerrainType> gameHexResources;
	private List<TokenNumber> tokens;
	private Harbour[] harbours;
	private int[] harbourPositions;
	
	private Robber robber;
	
	/**
	 * Constructor for Server
	 *
	 */
	public Island(Catan catan) {
		this.catan = catan;
		initializeHexResources();
		initializeNumberTokens();
		addHexesToBoard();
		addVertices();
		addVerticesToHexes();
		addVerticesToEdges();
		addHexesToVertices();
		addEdgesToVertices();
		
		this.harbours = initializeHarbours();
		this.harbourPositions = initializeHarbourPositions();
		addHarboursToVertices();
		this.skin = new IslandSkin(this);
		ConvertMaster.setIsland(this);
	}

	/**
	 * Constructor for Client
	 */
	public Island(Catan catan, TerrainType[] terrains, TokenNumber[] tokens, Harbour[] harbours, int[] harbourPositions) {
		this.catan = catan;
		this.harbours = harbours;
		this.harbourPositions = harbourPositions;
		addHexesToBoard(terrains, tokens);
		addVertices();
		addVerticesToHexes();
		addVerticesToEdges();
		addHexesToVertices();
		addEdgesToVertices();
		addHarboursToVertices();
		this.skin = new IslandSkin(this);
		addHarboursToBoard();
		ConvertMaster.setIsland(this);
	}
	
	/**
	 * add adjacent hexes as list to each vertex
	 *
	 */
	private void addHexesToVertices() {
	
		for(Tile hex : boardHexes) {
			List<Vertex> vertices = hex.getVertices();
			for(Vertex vertex : vertices){
				vertex.addHex(hex);
			}
		}
		
	}

	/**
	 * Fills "List<Edge> edges" of each vertices with connected edges
	 */
	private void addEdgesToVertices() {
		for(Edge edge : edges) {
			edge.getVertexFrom().addEdge(edge);
			edge.getVertexTo().addEdge(edge);
		}
	}
	
	/**
	 * Adds six vertices to each tile/ hexagon.
	 * Order:      1
	 *          /     \
	 *         0       2
	 *         |       |
	 *         3       5
	 *          \     /
	 *             4
	 */
	private void addVerticesToHexes() {

		int pos = 0;
		int topOffset = 0;
		int bottomOffset = 0;
		for (int i = 0; i < 5; i++) {
			bottomOffset += verticesPerRow[i];
			for (int j = 0; j < hexagonsPerRow[i]; j++) {
				getHexagon(pos).addVertices(getVertex(2 * j + topOffset), getVertex(2 * j + 1 + topOffset),
						getVertex(2 * j + 2 + topOffset));

				getHexagon(pos).addVertices(getVertex(2 * j + 1 + bottomOffset), getVertex(2 * j + 2 + bottomOffset),
						getVertex(2 * j + 3 + bottomOffset));
				pos++;
			}
			topOffset += verticesPerRow[i];
			if (i == 2) {
				topOffset++;
			}
			if (i == 1) {
				bottomOffset--;
			}
		}
	}
	
	/**
	 * Creates all 54 vertices and adds them to the list "vertices"
	 */
	private void addVertices() {
		vertices = new ArrayList<Vertex>();
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < verticesPerRow[i]; j++) {
				vertices.add(new Vertex(i, j,catan));
				
			}
		}
	}
	
	/**
	 * Assigns two vertices to each edge ("to" and "from" attributes of Edge)
	 */
	private void addVerticesToEdges() {
		// make connections and edges
		edges = new ArrayList<Edge>();
		Vertex to;
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < verticesPerRow[i]; j++) {
				Vertex from = getVertex(i, j);

				if (j < verticesPerRow[i] - 1) { // not last in row
	
					to = getVertex(i, j + 1);
					edges.add(new Edge(from, to,catan));
					from.addConnectedVertex(to);
				}
				if (j > 0) { // not first in row
					to = getVertex(i, j - 1);
					from.addConnectedVertex(to);
				}
				if (i < 5) { // not last row
					int offset = (verticesPerRow[i + 1] - verticesPerRow[i]) / 2;
					if ((j % 2 == 0 && i < 3) || (j % 2 == 1 && i >= 3)) { // vertical
						to = getVertex(i + 1, j + offset);
						edges.add(new Edge(from, to,catan));
						from.addConnectedVertex(to);
						to.addConnectedVertex(from);
					}
				}
			}
		}
	}
	
	/**
	 * Creates all 19 tiles and adds them to "boardHexes"
	 */
	private void addHexesToBoard() {
		boardHexes = new ArrayList<Tile>();
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < hexagonsPerRow[i]; j++) {
				TerrainType resource = getRandomGameHexResource();
				TokenNumber token = null;
				if (resource == TerrainType.DESERT) {
					token = TokenNumber.SEVEN;
					boardHexes.add(new Tile(i, j, resource, TokenNumber.SEVEN, true, catan));
				} else {
					token = getRandomNumberToken();
					boardHexes.add(new Tile(i, j, resource, token, false, catan));
				}
			}
		}
	}
	
	/**
	 * Adds 19 Tiles that have been sent from the server
	 */
	private void addHexesToBoard(TerrainType[] terrains, TokenNumber[] tokens) {
		boardHexes = new ArrayList<Tile>();
		int nextInArray = 0;
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < hexagonsPerRow[i]; j++) {
				TerrainType nextTerrain = terrains[nextInArray];
				TokenNumber nextToken = tokens[nextInArray];
				if (nextToken == TokenNumber.SEVEN) {
					boardHexes.add(new Tile(i, j, nextTerrain, nextToken, true, catan));
				} else {
					boardHexes.add(new Tile(i, j, nextTerrain, nextToken, false, catan));
				}
				nextInArray++;
			}
		}
	}
	
	/**
	 * Creates the HarbourSkins of all harbours
	 */
	private void addHarboursToBoard(){
		for(Vertex v : vertices){
			Harbour harbour = v.getHarbour();
			if(harbour != null){
				new HarbourSkin(harbour,v,this.getSkin());
			}
		}	
	}
	
	/**
	 * Fills list "tokens" with 18 needed instances of TokenNumber (random order)
	 */
	private void initializeNumberTokens() {
		tokens = new ArrayList<TokenNumber>();
		tokens.addAll(Arrays.asList(new TokenNumber[] { TokenNumber.TWO, TokenNumber.THREE, TokenNumber.THREE,
				TokenNumber.FOUR, TokenNumber.FOUR, TokenNumber.FIVE, TokenNumber.FIVE, TokenNumber.SIX,
				TokenNumber.SIX, TokenNumber.EIGHT, TokenNumber.EIGHT, TokenNumber.NINE, TokenNumber.NINE,
				TokenNumber.TEN, TokenNumber.TEN, TokenNumber.ELEVEN, TokenNumber.ELEVEN, TokenNumber.TWELVE }));
		Collections.shuffle(tokens);
	}
	
	/**
	 * Fills array "harbours" with 9 needed instances of Harbour (random order)
	 */
	private Harbour[] initializeHarbours() {
		ArrayList<Harbour> harbourList = new ArrayList<Harbour>();
		harbourList.addAll(Arrays.asList(new Harbour[] { Harbour.THREETOONE, Harbour.THREETOONE, Harbour.THREETOONE, 
				Harbour.THREETOONE, Harbour.TWOTOONEBRICK, Harbour.TWOTOONELUMBER, Harbour.TWOTOONEGRAIN, 
				Harbour.TWOTOONEWOOL, Harbour.TWOTOONEORE,}));
		Collections.shuffle(harbourList);
		Harbour[] harbours = new Harbour[9];
		harbourList.toArray(harbours);
		return harbours;
	}
	
	/**
	 * Determines the positions of the harbours 
	 * @return the new created Edges Array
	 */
	private int[] initializeHarbourPositions() {
		ArrayList<Integer> unpossibleEdges = new ArrayList<Integer>();
		
		// outerEdges is array with all positions of Edges that can contain a harbour
		int[] outerEdges = {0,2,3,5,6,8,9,21,22,37,38,52,53,64,65,71,70,69,68,67,66,56,54,41,39,24,23,11,10,1};
		int[] harbourPositions = new int[9];
		
		for(int i = 0; i < 9; i++){
			Random rand = new Random();
			int randInt = rand.nextInt(outerEdges.length);
			while(unpossibleEdges.contains(randInt)){
				randInt = rand.nextInt(outerEdges.length);
			}
			harbourPositions[i] = outerEdges[randInt];
			unpossibleEdges.add(randInt);
			
			//Make sure that harbours aren't on two edges that lie next to each other
			if(randInt != outerEdges.length-1){
				unpossibleEdges.add(randInt+1);
			}
			else unpossibleEdges.add(0);
			
			if(randInt != 0){
				unpossibleEdges.add(randInt-1);
			}
			else unpossibleEdges.add(outerEdges.length-1);
		}

		return harbourPositions;
	}
	
	/**
	 * Gets next TokenNumber in tokens and removes it from the list
	 * @return random TokenNumber
	 */
	private TokenNumber getRandomNumberToken() {
		TokenNumber token = tokens.get(0);
		tokens.remove(0);
		return token;
	}
	
	/**
	 * Fills list "gameHexRexources" with 19 needed instances of TerrainType (random order)
	 */
	private void initializeHexResources() {
		gameHexResources = new ArrayList<TerrainType>();
		for (int i = 0; i < 3; i++) {
			gameHexResources.add(TerrainType.HILLS);
		}
		
		gameHexResources.add(TerrainType.DESERT);
		
		for (int i = 0; i < 3; i++) {
			gameHexResources.add(TerrainType.MOUNTAINS);
		}
		for (int i = 0; i < 4; i++) {
			gameHexResources.add(TerrainType.PASTURE);
		}
		for (int i = 0; i < 4; i++) {
			gameHexResources.add(TerrainType.FIELDS);
		}
		for (int i = 0; i < 4; i++) {
			gameHexResources.add(TerrainType.FOREST);
		}
		Collections.shuffle(gameHexResources);
	}
	
	/**
	 * Gets next TerrainType in gameHexResources and removes it from the list
	 * @return random TerrainType
	 */
	private TerrainType getRandomGameHexResource() {
		TerrainType terrain = gameHexResources.get(0);
		gameHexResources.remove(0);
		return terrain;
	}
	
	/**
	 * Adds harbours to the vertices
	 */
	private void addHarboursToVertices() {
		for(int i = 0; i < harbours.length; i++){
			edges.get(harbourPositions[i]).getVertexFrom().setHarbour(harbours[i]);
			edges.get(harbourPositions[i]).getVertexTo().setHarbour(harbours[i]);
		}
	}
	
	/**
	 * Change position of the robber to a new tile
	 * @param tile the new position of the robber
	 */
	public void changeRobberPosition(Tile tile){
		tile.setRobber(true);
		this.robber.getTile().setRobber(false);
		Platform.runLater(new Runnable() { 
			@Override
			public void run() {
				robber.getSkin().reposition(tile, skin);
			}
		});
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * get hex by layout of hexes (row,pos)
	 *@return hex
	 */
	public Tile getHexagon(int row, int pos) {
		if (row >= 5 || pos >= hexagonsPerRow[row]) {
			return null;
		}
		int position = 0;
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < hexagonsPerRow[i]; j++) {
				if (i == row && j == pos) {
					return boardHexes.get(position);
				}
				position++;
			}
		}
		return null;
	}
	/**
	 * get hex by position (order)
	 *@return hex
	 */
	public Tile getHexagon(int pos) {
		if (pos < Settings.AMOUNT_OF_HEXES) {
			return boardHexes.get(pos);
		}
		return null;
	}
	/**
	 * get island skin
	 *@return skin
	 */
	public IslandSkin getSkin() {
		return skin;
	}
	/**
	 * get vertex by position (order from list)
	 *@return vertex
	 */
	public Vertex getVertex(int pos) {
		return vertices.get(pos);
	}
	/**
	 * get vertex by layout of vertices (row,pos)
	 *@return vertex
	 */
	public Vertex getVertex(int row, int pos) {
		int position = 0;
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < verticesPerRow[i]; j++) {
				if (i == row && j == pos) {
					// System.out.println("Position: " + position);
					return vertices.get(position);
				}
				position++;
			}
		}
		return null;
	}
	/**
	 * get hexes
	 *@return boardHexes
	 */
	public List<Tile> getHexes() {
		return boardHexes;
	}
	/**
	 * get vertices
	 *@return vertices
	 */
	public List<Vertex> getVertices() {
		return vertices;
	}
	/**
	 * get edges
	 *@return edges
	 */
	public List<Edge> getEdges() {
		return edges;
	}
	/**
	 * @return the harbours
	 */
	public Harbour[] getHarbours() {
		return harbours;
	}

	/**
	 * @return the harbourPositions
	 */
	public int[] getHarbourPositions() {
		return harbourPositions;
	}

	/**
	 * set robber
	 *@param robber
	 */
	public void setRobber(Robber robber) {
		this.robber = robber;
		
	}
	
	public Robber getRobber(){
		return robber;
	}

	/**
	 * @return the catan
	 */
	public Catan getCatan() {
		return this.catan;
	}

}
