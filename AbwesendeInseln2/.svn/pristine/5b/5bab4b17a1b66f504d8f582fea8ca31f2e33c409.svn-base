package controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

import jsonstructures.ConvertMaster;
import jsonstructures.RohstoffDaten;
import model.Catan;
import model.Edge;
import model.Player;
import model.PlayerClient;
import model.PlayerColor;
import model.ResourceType;
import model.Road;
import model.TradeOffer;
import model.Vertex;
import network.ServerHandler;
import network.Server;

/**
 * This class is the controller of the server that manages the model of the server
 * @author Stefanie Kloss
 *
 */

public class ServerControl {
	
	private Server server;
	
	private Catan catan;
	private ArrayList<Player> players;
	private ArrayList<Integer> tradeIdList;
	/**
	 * Count of players with more than seven cards when the robber gets moved
	 */
	private int bigHandCount;
	/**
	 * PlayerID of player that has diced a 7 in this turn, "-1" if player diced sth else 
	 */
	private int playerToRelocateRobber;
	
	/**
	 * Constructor
	 * @param port
	 */
	public ServerControl(int port) {
		server = new Server(this,port);
		server.start();
		System.out.println("[Thr]Started new Thread Server with ID "  + server.getId() + " [Thread : "+ Thread.currentThread().getId() + "]");
		players = new ArrayList<Player>();
		tradeIdList = new ArrayList<Integer>();
		bigHandCount = 0;
	}

	/**
	 * Handles the start game message from the client
	 * @param clientId
	 */
	public void handleStartGame(int clientId) {
		
		PlayerClient p = getPlayerWithID(clientId);
		boolean allPlayersReady = true;
		p.setReadyToStartGame(true);
		server.sendStatusUpdate(clientId, p.getPlayerColor().toServerString(), p.getName(), "Wartet auf Spielbeginn", p.getVictoryPoints(), p.getResCards());
		for(Player player: players){
			if(!((PlayerClient)player).isReadyToStartGame()){
				allPlayersReady = false;
			}
		}
		if(allPlayersReady && (players.size() == 3 || players.size() == 4)){
			this.catan = new Catan(players);
			server.sendStartMatch(catan.getIsland());
			PlayerClient turnTaker = (PlayerClient)catan.getCurrentTurnTaker();
			server.sendStatusUpdate(turnTaker.getPlayerID(), turnTaker.getPlayerColor().toServerString(), turnTaker.getName(), "Wuerfeln", turnTaker.getVictoryPoints(), ((PlayerClient)turnTaker).getResCards());
			server.sendError(turnTaker.getPlayerID(), "Dice to determine in which order you're going to play.");
			for(Player c : players){
				if(!turnTaker.equals(c)){
					server.sendStatusUpdate(c.getPlayerID(), c.getPlayerColor().toServerString(), c.getName(), "Warten", c.getVictoryPoints(), ((PlayerClient)c).getResCards());
				}
			}
		}
	}

	
	/**
	 * Rolls the dice and sends the number to the clients
	 * Distributes resources
	 * @param clientId
	 */
	public void handleDiceRoll(int clientId) {
		
		if(getPlayerWithID(clientId).getStatus().equals("Wuerfeln")){
			
			int[] diceResult = catan.getDice().diceResult();
			server.sendOk(clientId);
			server.sendDice(clientId, diceResult);
			
			if(catan.getRound() == 0){
				dicedToDetermineOrder(diceResult[0]+diceResult[1]);
				return;
			}
			
			Player p = getPlayerWithID(clientId);
			if((diceResult[0]+diceResult[1]) == 7){
				playerToRelocateRobber = clientId;
				for(Player pl : catan.getPlayers()){
					if(((PlayerClient)pl).getResCards().size() > 7){
						bigHandCount++;
						server.sendStatusUpdate(pl.getPlayerID(), pl.getPlayerColor().toServerString(), pl.getName(), "Karten wegen Raeuber abgeben", pl.getVictoryPoints(), ((PlayerClient)pl).getResCards());
					}
				}
				waitThenMoveRobber(false);
			}
			else { 
				for(Player pl : players){
					int id = ((PlayerClient)pl).getPlayerID();
					server.sendProduce(id, catan.distributeResources(diceResult, (PlayerClient)pl));
				}
				server.sendStatusUpdate(clientId, p.getPlayerColor().toServerString(), p.getName(), "Handeln oder Bauen", p.getVictoryPoints(), ((PlayerClient)p).getResCards());
			}
		}
	}
	
	/**
	 * Use when player rolled the dice to determine the order of players 
	 * Sends correct StatusUpdates to all players
	 * @param diceResult
	 */
	private void dicedToDetermineOrder(int diceResult){
		catan.saveDiceResultAndChangeOrder(diceResult);
		catan.changeTurnTaker();
		PlayerClient c = (PlayerClient)catan.getCurrentTurnTaker();
		for(Player p : players){
			if(!c.equals(p)){
				server.sendStatusUpdate(p.getPlayerID(), p.getPlayerColor().toServerString(), p.getName(), "Warten", p.getVictoryPoints(), ((PlayerClient)p).getResCards());
			}
		}
		
		if(catan.getRound() == 0){
			server.sendStatusUpdate(c.getPlayerID(), c.getPlayerColor().toServerString(), c.getName(), "Wuerfeln", c.getVictoryPoints(), ((PlayerClient)c).getResCards());
			server.sendError(c.getPlayerID(), "Dice to determine in which order you're going to play.");
		}
		else{
			server.sendStatusUpdate(c.getPlayerID(), c.getPlayerColor().toServerString(), c.getName(), "Dorf bauen", c.getVictoryPoints(), ((PlayerClient)c).getResCards());
		}
	}
	
	/**
	 * Waits until all players have given away cards, then sends the message to relocate the robber
	 * @param newPlayerGaveCards true if bigHandCount should get reduced, otherwise false
	 */
	private void waitThenMoveRobber(boolean newPlayerGaveCards) {
		if(newPlayerGaveCards) bigHandCount--;
		if(bigHandCount == 0){
			Player p = this.getPlayerWithID(playerToRelocateRobber);
			playerToRelocateRobber = -1;
			server.sendStatusUpdate(p.getPlayerID(), p.getPlayerColor().toServerString(), p.getName(), "Raeuber versetzen", p.getVictoryPoints(), ((PlayerClient)p).getResCards());
		}
	}
	
	/**
	 * Handles the KartenAbgabeDaten
	 * @param clientID
	 * @param resources
	 */
	public void handleGiveCards(int clientID, ArrayList<ResourceType> resources) {
		if(getPlayerWithID(clientID).getStatus().equals("Karten wegen Raeuber abgeben")){
			PlayerClient p = (PlayerClient) catan.getPlayerWithID(clientID);
			int discardCount = p.getResCards().size()/2;
			if(resources.size() == p.getResCards().size()/2)
				if(p.getResCards().containsAll(resources)){
					p.getHand().spend(resources);
					server.sendOk(clientID);
					server.sendCosts(clientID, resources);
					server.sendStatusUpdate(clientID, p.getPlayerColor().toServerString(), p.getName(), "Warten", p.getVictoryPoints(), p.getResCards());
					waitThenMoveRobber(true);
				}
				else{
					server.sendError(clientID, "You can only discard resources you own!\nPlease try again.");
				}
			else server.sendError(clientID, "You have to discard exactly " + discardCount + " cards!\nPlease try again.");
		}
	}

	/**
	 * Handels the ClientRÃ¤uberDaten message from a Client 
	 * @param clientID
	 * @param aimedPlayerID
	 */
	public void handleRelocateRobber(int clientID, int aimedPlayerID){
		if(getPlayerWithID(clientID).getStatus().equals("Raeuber versetzen")){
			server.sendOk(clientID);
			PlayerClient robber = (PlayerClient)catan.getPlayerWithID(clientID);
			if(aimedPlayerID >= 0){
				PlayerClient aim = (PlayerClient)catan.getPlayerWithID(aimedPlayerID);
				ResourceType robbedRes = aim.getHand().getRandomResource();
				aim.getHand().spend(robbedRes);
				server.sendCosts(aimedPlayerID, robbedRes);
				server.sendError(aimedPlayerID, robber.getName() + " just stole you a " + robbedRes + "!");
				robber.getHand().addResource(robbedRes);
				server.sendProduce(clientID, robbedRes);
				server.sendError(clientID, "You just stole " + aim.getName() +  " a " + robbedRes + "!");
			}
			server.sendStatusUpdate(clientID, robber.getPlayerColor().toServerString(), robber.getName(), "Handeln oder Bauen", robber.getVictoryPoints(), robber.getResCards());
		}
	}

	/**
	 * Handles the end turn event of a client
	 * @param clientId
	 */
	public void handleEndTurn(int clientId) {
		if(getPlayerWithID(clientId).getStatus().equals("Handeln oder Bauen")){
			Player p = getPlayerWithID(clientId);
			server.sendOk(clientId);
			server.sendStatusUpdate(clientId, p.getPlayerColor().toServerString(), p.getName(), "Warten", p.getVictoryPoints(), ((PlayerClient)p).getResCards());
			catan.changeTurnTaker(); 
			Player turn  = catan.getCurrentTurnTaker();
			if(catan.getRound() > 2){
				server.sendStatusUpdate(turn.getPlayerID(), turn.getPlayerColor().toServerString(), turn.getName(), "Wuerfeln", turn.getVictoryPoints(), ((PlayerClient)turn).getResCards());
			}else{
				server.sendStatusUpdate(turn.getPlayerID(), turn.getPlayerColor().toServerString(), turn.getName(), "Dorf bauen", turn.getVictoryPoints(), ((PlayerClient)turn).getResCards());
			}
		}
	}

	/**
	 * Handles the build road event of a client
	 * @param kante			edge where to build the road
	 * @param clientId		client
	 */
	public void handleBuildRoad(Edge kante, int clientId) {
		
		PlayerClient p = getPlayerWithID(clientId);
		
		if(p.getStatus().equals("Handeln oder Bauen") || p.getStatus().equals("Strasse bauen")){
		
			boolean allowedLocation = p.canBuildRoad(kante);
			if(!allowedLocation){
				server.sendError(clientId, "You cannot build a road on this edge!");
				return;
			}
			
			if((catan.getRound() == 1 && p.countRoads() == 0) || (catan.getRound() == 2 && p.countRoads() == 1)){
				server.sendOk(clientId);
				server.sendConstruction(p.build(kante, true));
				server.sendStatusUpdate(clientId, p.getPlayerColor().toServerString(), p.getName(),"Warten", p.getVictoryPoints(), p.getResCards());
				catan.changeTurnTaker();
				PlayerClient turn = (PlayerClient)catan.getCurrentTurnTaker();
				if(catan.getRound() < 3) server.sendStatusUpdate(turn.getPlayerID(), turn.getPlayerColor().toServerString(), turn.getName(), "Dorf bauen", turn.getVictoryPoints(), turn.getResCards());
				else{
					catan.distributeResources(server);
					server.sendStatusUpdate(turn.getPlayerID(), turn.getPlayerColor().toServerString(), turn.getName(), "Wuerfeln", turn.getVictoryPoints(), turn.getResCards());
				}
			}
			else{
				if(p.getHand().canBuyRoad() && (p.getRoadsLeft() > 0)){ 
					p.getHand().buyRoad();
					server.sendOk(clientId);
					server.sendConstruction(p.build(kante, true));
					ArrayList<ResourceType> resList = new ArrayList<ResourceType>();
					resList.add(ResourceType.BRICK);
					resList.add(ResourceType.LUMBER);
					server.sendCosts(clientId, resList);
				}else{
					if(p.getRoadsLeft() <= 0) server.sendError(clientId, "You don't have any roads left!");
					else server.sendError(clientId, "You don't have enough resources!");
				}
			}
		}
	}

	
	/**
	 * Handles the build settlement event
	 * @param ecke				vertex where to build settlement
	 * @param clientId			client
	 */
	public void handleBuildSettlement(Vertex ecke, int clientId) {

		PlayerClient p = getPlayerWithID(clientId);
		
		if(p.getStatus().equals("Handeln oder Bauen") || p.getStatus().equals("Dorf bauen")){

			boolean allowedLocation = p.canBuildSettlement(ecke);
			if(!allowedLocation){
				server.sendError(clientId, "You cannot build a settlement on this vertex!");
				return;
			}
			
			if((catan.getRound() == 1 && p.countSettlements() == 0) || (catan.getRound() == 2 && p.countSettlements() == 1)){
				p.addAndCheckVictoryPoints(1);
				server.sendOk(clientId);
				server.sendConstruction(p.build("Dorf", ecke, true));
				server.sendStatusUpdate(clientId, p.getPlayerColor().toServerString(), p.getName(),"Strasse bauen", p.getVictoryPoints(), p.getResCards());
			}
			else if(catan.getRound() > 2){
				if(p.getHand().canBuySettlement() && (p.getSettlementsLeft() > 0)){ 
					boolean gameWon = p.addAndCheckVictoryPoints(1);
					if(gameWon) server.sendEndMatch(p);
					p.getHand().buySettlement();
					server.sendOk(clientId);
					server.sendConstruction(p.build("Dorf", ecke, true));
					ResourceType[] res = {ResourceType.BRICK, ResourceType.LUMBER, ResourceType.WOOL, ResourceType.GRAIN};
					ArrayList<ResourceType> resList = new ArrayList<ResourceType>();
					Collections.addAll(resList, res);
					server.sendCosts(clientId, resList);
					server.sendStatusUpdate(clientId, p.getPlayerColor().toServerString(), p.getName(),"Handeln oder Bauen", p.getVictoryPoints(), p.getResCards());
				}else{
					if(p.getSettlementsLeft() <= 0) server.sendError(clientId, "You don't have any settlements left!");
					else server.sendError(clientId, "You don't have enough resources!");
				}
			}
		}
	}

	/**
	 * Handles the build city event
	 * @param ecke			vertex where tu build city
	 * @param clientId		client
	 */
	public void handleBuildCity(Vertex ecke, int clientId) {
		
		PlayerClient p = getPlayerWithID(clientId);
		
		if(p.getStatus().equals("Handeln oder Bauen")){
			
			boolean allowedLocation = p.canBuildSettlement(ecke);
			if(!allowedLocation){
				server.sendError(clientId, "You cannot build a city on this vertex!");
				return;
			}
			
			if(p.getHand().canBuyCity() && (p.getCitiesLeft() > 0)){ 
				boolean gameWon = p.addAndCheckVictoryPoints(1);
				if(gameWon) server.sendEndMatch(p);
				p.getHand().buyCity();
				server.sendOk(clientId);
				server.sendConstruction(p.build("Stadt", ecke, true));
				ResourceType[] res = {ResourceType.ORE, ResourceType.ORE, ResourceType.ORE, ResourceType.GRAIN, ResourceType.GRAIN};
				ArrayList<ResourceType> resList = new ArrayList<ResourceType>();
				Collections.addAll(resList, res);
				server.sendCosts(clientId, resList);
				server.sendStatusUpdate(clientId, p.getPlayerColor().toServerString(), p.getName(),"Handeln oder Bauen", p.getVictoryPoints(), p.getResCards());
			}else{
				if(p.getCitiesLeft() <= 0) server.sendError(clientId, "You don't have any cities left!");
				else server.sendError(clientId, "You don't have enough resources!");
			}
		}
			
	}
	
	/**
	 * Handles the SpielerInitNachricht
	 * @param name
	 * @param color
	 * @param clientID
	 */
	public void handlePlayerInit(String name, PlayerColor color, int clientID){
		
		boolean existsAlready = false;
		for(Player player: players){
			if(player.getPlayerColor().equals(color) && player.getPlayerID() != clientID ){
				server.sendError(clientID, "This color is already taken!");
				return;
			}if(player.getName().equals(name) && player.getPlayerID() != clientID ){
				server.sendError(clientID, "This name is already taken!");
				return;
			}if(clientID == player.getPlayerID()){
				existsAlready = true;
			}
		}
		if(!existsAlready){
			PlayerClient p = new PlayerClient(color, clientID, name);
			players.add(p);
			server.sendStatusUpdate(clientID, p.getPlayerColor().toServerString(), p.getName(), "Spiel starten", p.getVictoryPoints(), p.getResCards());
			for(Player oldP: players){
				if(oldP.getPlayerID() != clientID){
					server.sendStatusUpdate(oldP.getPlayerID(), oldP.getPlayerColor().toServerString(), 
					  oldP.getName(), oldP.getStatus(), oldP.getVictoryPoints(), ((PlayerClient)oldP).getResCards());
				}	
			}
			
		}else{
			getPlayerWithID(clientID).setName(name);
			getPlayerWithID(clientID).setPlayerColor(color);
		}
		
	}
	
	/**
	 * Gets the player, the playerId belongs to
	 * @param playerID
	 * @return the searched player
	 */
	private PlayerClient getPlayerWithID(int playerID){
		
		for(Player player: players){
			if(player.getPlayerID() == playerID){
				return (PlayerClient)player;
			}
		}
		return null;
	}
	
	/**
	 * Handles an incoming trade offer
	 * @param offer offered resources
	 * @param demand demanded resources
	 * @param idPlayer id of the offerer
	 */
	public void handleTradeOffer(ArrayList<ResourceType> offer, RohstoffDaten demand, int idPlayer) {
		
		if(getPlayerWithID(idPlayer).getStatus().equals("Handeln oder Bauen")){
			if(getPlayerWithID(idPlayer).getHand().containsRes(offer)){
				server.sendOk(idPlayer);
				int idTrade = newTradeId();
				catan.getTrades().add(new TradeOffer(idTrade, getPlayerWithID(idPlayer), offer, demand.getResources(), true));
				server.sendTradeOffer(idPlayer, offer, demand, idTrade);
			}
			else server.sendError(idPlayer, "You can only offer resources you currently own!");
		}
	}
	
	/**
	 * Checks whether the player that accepted a trade has enough resources for the trade
	 * @param tradeId
	 * @param clientId
	 */
	public void handleAcceptTrade(int tradeId, int clientId) {
		if(getPlayerWithID(clientId).getStatus().equals("Warten")){
			TradeOffer trade = catan.getTrade(tradeId);
			if(getPlayerWithID(clientId).getHand().containsRes(trade.getDemand())){
				server.sendTradeAccepted(tradeId,clientId);
				catan.getTrade(tradeId).accept(clientId);
			}
			else  server.sendError(clientId, "You don't have enough resources for the trade!");
		}
	}
	
	/**
	 * Generates a random TradeID (between 0 and 1000) that isn't assigned yet
	 * @return The new TradeID
	 */
	private int newTradeId(){
		Random rand = new Random();
		int tradeId = rand.nextInt(1000);
		while(tradeIdList.contains(tradeId)){
			tradeId = rand.nextInt(1000);
		}
		tradeIdList.add(tradeId);
		return tradeId;
	}
	
	/**
	 * Executes a trade. Sends cost and produce messages.
	 * @param tradeId
	 * @param acceptedID
	 * @param offererID
	 */
	public void executeTrade(int tradeId, int acceptedID, int offererID) {
		if(getPlayerWithID(offererID).getStatus().equals("Handeln oder Bauen")){
			TradeOffer tradeOffer = catan.getTrade(tradeId);
			if(tradeOffer.hasAccepted(acceptedID)){
				if(getPlayerWithID(acceptedID).getHand().containsRes(tradeOffer.getDemand()) 
						&& getPlayerWithID(offererID).getHand().containsRes(tradeOffer.getOffer())){
					server.sendSuccessfulTrade(catan.getTrade(tradeId).getPlayerId(), acceptedID);
					server.sendCosts(offererID, tradeOffer.getOffer());
					server.sendProduce(offererID, tradeOffer.getDemand());
					server.sendCosts(acceptedID, tradeOffer.getDemand());
					server.sendProduce(acceptedID, tradeOffer.getOffer());
					catan.getTrades().remove(tradeOffer);
				}
				else{
					server.sendError(offererID, "A problem occured. Seems like one of\nyou hasn't got the needed resources.");
				}
			}else{
				server.sendError(catan.getTrade(tradeId).getPlayerId(), getPlayerWithID(acceptedID).getName() + " doesn't want to trade!");
			}
		}
	}
	
	/**
	 * Cancels a trade or adds a player to the declined Traders
	 * @param tradeId
	 * @param clientId
	 */
	public void handleCancelTrade(int tradeId, int clientId) {
		if(catan.getTrade(tradeId) != null){
			if(catan.getTrade(tradeId).getPlayerId() == clientId){
				catan.getTrades().remove(catan.getTrade(tradeId));
				server.sendCancelledTrade(tradeId,clientId);
			}else{
				catan.getTrade(tradeId).decline(clientId);
				if(catan.getTrade(tradeId).getDeclinedTraders().size()==catan.getPlayerCount()-1){
					catan.getTrades().remove(catan.getTrade(tradeId));
					server.sendCancelledTrade(tradeId,clientId);
				}
			}
		}
	}
	
	/**
	 * Handles the request of a player to do a maritime trades
	 * @param clientId
	 * @param offer
	 * @param offerList
	 * @param demand
	 */
	public void handleMaritimeTrade(int clientId, int[] offer,ArrayList<ResourceType> offerList, ArrayList<ResourceType> demand){
		if(getPlayerWithID(clientId).getStatus().equals("Handeln oder Bauen")){
			boolean priceOk = false;
			for(int i=0;i<5;i++){
				if(offer[i]==catan.getPlayerWithID(clientId).getMaritimePrices(demand.get(0))[i]){
					priceOk = true;
				}
			}
			if(priceOk){
				if(getPlayerWithID(clientId).getHand().containsRes(offerList)){
					getPlayerWithID(clientId).getHand().addResource(demand);
					getPlayerWithID(clientId).getHand().remRecource(offerList);
					server.sendCosts(clientId, offerList);
					server.sendProduce(clientId, demand);
				}else{
					server.sendError(clientId, "You don't have enough resources!"); //"magic text" ;)
				}
			}else{
				server.sendError(clientId, "You don't control the right Harbour to trade at this rate!");
			}
		}
	}

	/**
	 * Activates cheat and gives the player 5 of each resource
	 * @param playerID
	 */
	public void greedCheatActivated(int playerID) {
		ArrayList<ResourceType> cheat = new ArrayList<ResourceType>();
		for(int i = 0; i < 5;i++ ){
			cheat.add(ResourceType.BRICK);
			cheat.add(ResourceType.GRAIN);
			cheat.add(ResourceType.LUMBER);
			cheat.add(ResourceType.ORE);
			cheat.add(ResourceType.WOOL);
		}
		PlayerClient p = (PlayerClient) catan.getPlayerWithID(playerID);
		p.getHand().produce(cheat);
		server.sendProduce(playerID,cheat);
	}
	
	/**
	 * Updates the status of a player
	 * @param id id of the playerClient
	 * @param status new status of the playerClient
	 */
	public void updatePlayerStatus(int id, String status) {
		getPlayerWithID(id).setStatus(status);
	}
	
	/**
	 * Checks for all Trades if the offerers still own the offered resources.
	 * If that's not the case the affected trade gets removed.
	 */
	public void checkTrades() {
		ArrayList<TradeOffer> trades = catan.getTrades();
		for(TradeOffer trade : trades){
			if(!getPlayerWithID(trade.getPlayerId()).getHand().containsRes(trade.getOffer())){
				server.sendError(trade.getPlayerId(), "Your Trade Offer with the ID " + trade.getTradeId() 
				           + " got deleted because you don't own all offered resources anymore.");
				server.sendCancelledTrade(trade.getTradeId(),trade.getPlayerId());
				trades.remove(trade);
				
			}
		}	
	}

	/**
	 * Handles the road building event when someone played the Road building development card
	 * @param text
	 * @param source
	 */
	public void handleRoadBuilding(String text, ServerHandler source) {
		int player = source.getClientId();
		if(text.length() > 63){ //building 2 roads
			int startOne = text.indexOf("Strasse 1")+11;
			int endOne = text.indexOf("Strasse 1")+13;
			String streetOne = text.substring(startOne, endOne);
			
			int startTwo = text.indexOf("Strasse 2")+11;
			int endTwo = text.indexOf("Strasse 2")+13;
			String streetTwo = text.substring(startTwo, endTwo);
			
			Edge one = ConvertMaster.convertToEdge(streetOne);
			Edge two = ConvertMaster.convertToEdge(streetTwo);
			
			//check if valid positions then send StrassenBauKarte ausspielen -> dann Bauvorgang
			String build = "{\"Strassenbaukarte ausspielen\":{\"Spieler\":" + player  +",\"Strasse 1\":" + streetOne + ",\"Strasse 2\":" + streetTwo + "}}";
			server.sendToAll(build);
			Road roadOne = new Road(one, catan.getPlayerWithID(player));
			Road roadTwo = new Road(two, catan.getPlayerWithID(player));
			server.sendConstruction(roadOne);
			server.sendConstruction(roadTwo);
			//else send error message
		}else{	//build only 1 road
			int startOne = text.indexOf("Strasse 1")+11;
			int endOne = text.indexOf("Strasse 1")+13;
			String streetOne = text.substring(startOne, endOne);
			Edge one = ConvertMaster.convertToEdge(streetOne);
			//check if valid positions then send Bauvorgang
			String build = "{\"Strassenbaukarte ausspielen\":{\"Spieler\":" + player  +",\"Strasse 1\":" + streetOne +"}}";
			server.sendToAll(build);
			Road roadOne = new Road(one, catan.getPlayerWithID(player));
			server.sendConstruction(roadOne);
			// else send error message
		}
		
	}
}
