package view;



import game.Settings;
import javafx.scene.Node;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Shape;
import model.*;

/**
 * View of the island. Contains views of all tiles, edges, vertices, tokens.
 *
 */
public class IslandSkin extends Pane {
	private static double HALF_SQRT_THREE = Math.sqrt(3) / 2;

	private Island island;

	public IslandSkin(Island island) {
		setPrefSize(Settings.ISLAND_SKIN_WIDTH, Settings.ISLAND_SKIN_HEIGHT);
		this.island = island;

		addHexes();
		positionVerticesAroundHexes();
		addVertices();
		alignEdgesToVertices();
		addEdges();

	}

	private void alignEdgesToVertices() {
		for (Edge edge : island.getEdges()) {
			double fromX = edge.getVertexFrom().getSkin().getShape().getTranslateX();
			double fromY = edge.getVertexFrom().getSkin().getShape().getTranslateY();
			double toX = edge.getVertexTo().getSkin().getShape().getTranslateX();
			double toY = edge.getVertexTo().getSkin().getShape().getTranslateY();
			edge.getSkin().getShape().setTranslateX((fromX + toX) / 2);
			edge.getSkin().getShape().setTranslateY((fromY + toY) / 2);
			if ((fromX - toX) < -0.01 * Settings.SCALE) { // left to right
				if (fromY > toY) { // going up
					edge.setRotation(-30);
				} else if (fromY < toY) { // going down
					edge.setRotation(30);
				}
			} else { // vertical
				edge.setRotation(90);
			}

		}
	}

	private void addEdges() {
		for (Edge edge : island.getEdges()) {
			getChildren().add(edge.getSkin().getShape());
		}
	}

	private void addVertices() {
		for (Vertex vertex : island.getVertices()) {
			getChildren().add(vertex.getSkin().getShape());
		}
	}

	private void positionVerticesAroundHexes() {
		for (Tile hex : island.getHexes()) {
			Shape hexagon = hex.getSkin().getShape();
			for (int i = 0; i < 6; i++) {
				Vertex vertex = hex.getVertices().get(i);
				double offsetX = 0;
				double offsetY = 0;
				switch (i) {
				case 0:
					offsetX = -HALF_SQRT_THREE;
					offsetY = -0.5;
					break;
				case 1:
					offsetX = 0d;
					offsetY = -1d;
					break;
				case 2:
					offsetX = HALF_SQRT_THREE;
					offsetY = -0.5;
					break;
				case 3:
					offsetX = -HALF_SQRT_THREE;
					offsetY = 0.5;
					break;
				case 4:
					offsetX = 0d;
					offsetY = 1d;
					break;
				case 5:
					offsetX = HALF_SQRT_THREE;
					offsetY = 0.5;
					break;
				default:
					break;
				}
				vertex.getSkin().getShape().setTranslateX(hexagon.getTranslateX() + (offsetX * Settings.SCALE));
				vertex.getSkin().getShape().setTranslateY(hexagon.getTranslateY() + (offsetY * Settings.SCALE));
			}
		}
	}

	private void addHexes() {
		for (Tile hex : island.getHexes()) {
			getChildren().add(hex.getSkin().getShape());
			getChildren().add((new NumberTokenSkin(hex)).getShape());
		}
	}

	public void addElements(Node... nodes) {
		getChildren().addAll(nodes);
	}

	
}
