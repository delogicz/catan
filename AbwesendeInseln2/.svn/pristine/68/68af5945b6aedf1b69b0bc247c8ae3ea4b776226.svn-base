package model;

import java.util.ArrayList;

import bot.Bot;
import controller.SetUpControl;
import game.GameManager;
import javafx.scene.Scene;
import view.GameSkin;
import view.SetUpSkin;

/**
 * The SetUp adds new players 
 * @author Stefanie Kloss
 *
 */
public class SetUp {
	
	private GameManager gameManager;
	
	private SetUpControl setUpControl;
	private SetUpSkin setUpSkin;
	private ArrayList<Player> players;
	private PlayerClient playerClient;
	
	private int playerId;
	
	/**
	 * Constructor
	 * @param gameManager the gameManager of the game
	 */
	public SetUp(GameManager gameManager){
		
		this.gameManager = gameManager;
		this.setUpControl = new SetUpControl(this);
		this.players = new ArrayList<Player>();
		this.playerId = 0;

		this.setUpSkin = new SetUpSkin(this, setUpControl);
		
	}
	
	/**
	 * Starts the game when all players were added (handleStartMatch)
	 * @param terrains
	 * @param tokens
	 */
	public void startMatch(TerrainType[] terrains, TokenNumber[] tokens){
		Catan catan = new Catan(gameManager, players, playerClient, terrains, tokens);
		for(Player player: players){
			player.setCatan(catan);
		}
		gameManager.newGame(catan);
	}
	
	/**
	 * Starts the game when all players were added
	 */
	public void startPlaying(){
		Catan catan = new Catan(gameManager, players, playerClient);
		for(Player player: players){
			player.setCatan(catan);
			player.getPlayerControl().setCatan(catan);
		}
		gameManager.newGame(catan);
	}
	
	/**
	 * Adjusts view after game was started (Status "Wartet auf Spielbeginn") 
	 */
	public void waitForStart(){
		setUpSkin.waitView();
	}
	
	/**
	 * Adjusts choice of name and color of a player or creates a new player 
	 * @param playerColor The color of the player
	 * @param name The name of the new player
	 * @param playerID The ID of the player
	 * @param isPlayerClient
	 */
	public void adjustPlayer(PlayerColor playerColor, String name, int playerID, boolean isPlayerClient){
		boolean alreadyExists = false;
		for(Player player : players){
			if(player.getPlayerID() == playerID){
				alreadyExists = true;
				player.setPlayerColor(playerColor);
				player.setName(name);
			}
		}
		if(!alreadyExists){
			addPlayer(playerColor, name, playerID, isPlayerClient);
		}
	}
	
	/**
	 * Adds a new player to the game
	 * @param playerColor The color of the new player
	 * @param name The name of the new player
	 */
	public void addPlayer(PlayerColor playerColor, String name) {
		if(players.size() < 4){
			this.playerClient = new PlayerClient(playerColor, playerId, name);
			players.add(playerClient);
			this.playerId++;
		}
		else{
			System.out.println("There are already four players");
		}
	}
	
	/**
	 * Adds a new player to the game
	 * @param playerColor The color of the new player
	 * @param name The name of the new player
	 * @param playerID The ID of the new player
	 * @param isPlayerClient
	 */
	public void addPlayer(PlayerColor playerColor, String name, int playerID, boolean isPlayerClient) {
		if(!isPlayerClient){
			Player player = new Player(playerColor, playerID, name);
			players.add(player);
		}else{
			this.playerClient = new PlayerClient(playerColor, playerID, name);
			players.add(playerClient);
		}
	}
	
	/**
	 * Adds a new bot to the game
	 * @param playerColor The color of the new bot
	 */
	public void addBot(PlayerColor playerColor, String name) {
		if(players.size() < 4){
			Bot bot = new Bot(playerColor, playerId, name);
			players.add(bot);
			this.playerId++;
		}
		else{
			System.out.println("There are already four players");
		}
	}

	/**
	 * @return the setUpSkin
	 */
	public SetUpSkin getSetUpSkin() {

		return setUpSkin;
	}
	
	/**
	 * @return the players
	 */
	public ArrayList<Player> getPlayers(){
		return this.players;
	}
	
	/**
	 * @return the gameManager
	 */
	public GameManager getGameManager() {
		return this.gameManager;
	}
	
	/**
	 * Sends a message to the Server
	 * @param name
	 * @param chosenColor
	 */
	public void clientSendPlayerRequest(String name, PlayerColor chosenColor) {
		String color = "";
		switch(chosenColor){
		case RED :		color = "Rot"; break;
		case ORANGE:	color = "Orange"; break;
		case BLUE:		color = "Blau"; break;
		case WHITE:		color = "Weiss"; break;
		}
		gameManager.getClient().sendPlayerInit(name, color);	
	}
}
