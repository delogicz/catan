package model;

import java.util.ArrayList;
import java.util.Stack;

import game.GameManager;
import javafx.scene.Cursor;

/**
 * Describes a participant in the game. Stores his current state (victoryPoints, resCards, etc.).
 * @author Daniel Panangian, Stefanie Kloss, Lena Sonnleitner
 */
public class Player {
	
	protected int victoryPoints;
	protected PlayerColor playerColor;
	private int playerID;
	protected String name;
	protected String status;
	
	protected Catan catan;

	private int knightCount;
	private boolean hasLargestArmy; 
	private boolean hasLongestRoad;
	
	private ArrayList<Harbour> harbours;
	private ArrayList<Road> roads;
	private int longestRoad;
	protected ArrayList<Settlement> settlements;
	private ArrayList<City> cities;
	
	
	private Hand playerCards;
	
	private int roadsLeft;
	private int settlementsLeft;
	private int citiesLeft;
	
	protected int resCardsCount;
	protected ArrayList<ResourceType> resCards;
	private ArrayList<DevelopmentCard> devCards;
	
	private boolean buildSettlementPressed;
	private boolean buildRoadPressed;
	private boolean buildCityPressed;
	
	protected boolean canBuildRoad;
	protected boolean canBuildSettlement;
	private boolean canBuildCity;

	protected boolean relocateRobber;
	protected Player currentTurnTaker;
	protected boolean active;
	
	/**
	 * Constructor
	 */
	public Player(PlayerColor playerColor, int playerId, String name){
		
		this.catan = null;
		this.playerCards = new Hand();
		this.playerID = playerId;
		this.name = name;
		this.status = "";
		this.victoryPoints = 0;
		this.playerColor = playerColor;
		this.knightCount = 0;
		this.resCardsCount = 0;
		setCards(new ArrayList<ResourceType>());
		harbours = new ArrayList<Harbour>();
		roads = new ArrayList<Road>();
		longestRoad = 0;
		settlements = new ArrayList<Settlement>();
		cities = new ArrayList<City>();
		roadsLeft = 15;
		settlementsLeft = 5;
		citiesLeft = 4;
		
		canBuildRoad = false;
		canBuildSettlement= false;
		
		hasLongestRoad = false;
		hasLargestArmy = false;
		this.relocateRobber = false;
	}
	/**
	 * get player's Hand
	 *@return playerCards
	 */
	public Hand getPlayerCards() {
		return playerCards;
	}
	/**
	 * get player's color
	 *@return playerColor
	 */
	public PlayerColor getPlayerColor(){
		return this.playerColor;
	}
	/**
	 * get victory point
	 *@return victoryPoints
	 */
	public int getVictoryPoints() {
		return victoryPoints;
	}
	
	/**
	 * set victory point
	 *@param newVictoryPoints
	 */
	public void setVictoryPoints(int newVictoryPoints) {
		victoryPoints = newVictoryPoints;		
	}
	/**
	 * get knight count
	 *@return knightCount
	 */
	public int getKnightCount(){
		return knightCount;
	}
	
	public void setHasLargestArmy(Boolean b) {
		if (hasLargestArmy == true && b == false)
			victoryPoints--;
		else if (hasLargestArmy == false && b == true)
			victoryPoints++;
		hasLargestArmy = b;
	}
	
	private boolean hasLargestArmy(){
		return hasLargestArmy;
	}
	
	/**
	 * Try to build a new road
	 * @param edge where road is tried to be build on
	 * @param gameSkin 
	 */
	public void buildRoad(Edge edge){
		if(roadsLeft > 0 && edge.getOccupyingBuilding() == null){
			
			Road newRoad = new Road(edge, this, catan.getIsland().getSkin() );
			this.canBuildRoad= true;
			edge.setOccupyingBuilding(newRoad);
			roads.add(newRoad);
			roadsLeft--;
			if(catan.getRounds() == 1 ||  catan.getRounds() == 2){
				catan.getGameControl().disableBuildRoadButton();
			}
			
			// TODO: UPDATE longestRoad of this player
			
			
			// TODO: UPDATE: longestRoad of all players
		}
		else{
			System.out.println("building road failed");
		}
		
	}
	
	
	/**
	 * Try to build a new settlement
	 * @param vertex where settlement is tried to be build on
	 * @param gameSkin
	 */
	public void buildSettlement(Vertex vertex) {
		if(settlementsLeft > 0 && vertex.getOccupyingBuilding() == null){
			Settlement newSettlement = new Settlement(vertex, this, catan.getIsland().getSkin());
			canBuildSettlement = true;
			settlements.add(newSettlement);
			vertex.setOccupied(true);
			vertex.setOccupyingBuilding(newSettlement);
			for (Tile hex : vertex.getHexes()){
				hex.getSettlements().add(newSettlement);
			}
			settlementsLeft--;
			if(catan.getRounds() == 1 ||  catan.getRounds() == 2){
				catan.getGameControl().disableBuildSetButton();
				catan.getGameControl().enableBuildRoadButton();
			}

			victoryPoints++;
			checkVictoryPoints();
			System.out.println("a Settlement was built in vertex " + vertex.getRow() + vertex.getPos());
		}
		else{
			System.out.println("building settlement failed");
		}
		
	}
	
	/**
	 * lets the player dice
	 */
	public void dice(){
		catan.dice(this);
	}

	public int longestRoad(){
		Stack stack = new Stack();
		 longestRoad = 0;
		 Edge edge;
		 /**settlements = new ArrayList<Settlement>();*/
		//geht die ganze Settlements Liste durch
		 for(Settlement settlement:settlements){
			 //geht jede Kante durch
			 for(int i = 0; i<2; i++){
				 edge = settlement.getVertex().getEdges().get(i);
				 if(!(edge.getOccupyingBuilding() == null) && edge.getOccupyingBuilding().getOwner() == this){
					 longestRoad++;
				 }
			 }
		 }
		 System.out.println("Player " + this.playerColor + " longestRoad = " + longestRoad);
		 return longestRoad;
	}

	/**
	 * Try to build a new city
	 * @param vertex where city is tried to be build on
	 * @param gameSkin
	 */
	public void buildCity(Vertex vertex){
		if(citiesLeft > 0) {
			City newCity = new City(vertex, this, catan.getIsland().getSkin());
			vertex.setOccupyingBuilding(newCity);
			cities.add(newCity);
			settlementsLeft++;
			citiesLeft--;
			
			victoryPoints += 2;
			checkVictoryPoints();
		}
		else{
			System.out.println("building city failed");
			
		}
		
	}
	
	/**
	 * Try to buy a development card
	 */
	public void buyDevCard() {
		if(playerCards.canBuyDevCard()){
			DevelopmentCard newDevCard = DevelopmentCard.random();
			devCards.add(newDevCard);
			if(newDevCard == DevelopmentCard.VICTORYPOINT){
				victoryPoints++;
				checkVictoryPoints();
			}
			else if(newDevCard == DevelopmentCard.KNIGHT){
				knightCount++;
				//TODO: catan.chackLargestArmy();
			}
		}
		else { catan.getGameManager().getApp().popUpMessage("You haven't got enought "
				     + "resourcecs to buy a Development Card.");
		}
	}
	
	/**
	 * Checks whether player won the game or not
	 * Calls catan.gameWon(Player winner)
	 */
	private void checkVictoryPoints(){
		if(victoryPoints >= 10){
			catan.gameWon(this);
		}
	}
	/**
	 * method for trading resources with the harbour
	 */
	public void harbourTrade() {
		
	}
	/**
	 * method for trading resources with other players
	 */
	public void internalTrade(int[] resourcesOffer, int[] resourcesRequest){
		int brickOffer = resourcesOffer[0];
		int grainOffer = resourcesOffer[1];
		int lumberOffer = resourcesOffer[2];
		int oreOffer = resourcesOffer[3];
		int woolOffer = resourcesOffer[4];
		
		for(ResourceType resourceCard : resCards) {
			switch(resourceCard) {
			case BRICK : brickOffer--; break;
			case GRAIN : grainOffer--; break; 
			case LUMBER : lumberOffer--; break;
			case ORE : oreOffer--; break;
			case WOOL : woolOffer--; break;
			}
			if(brickOffer <= 0 && grainOffer <= 0 && lumberOffer <= 0 && oreOffer <= 0 && woolOffer <= 0) {
//				startTrade();
				//TODO: startTrade()
			}		
		}
		
//		tradeFailed(); // TODO
		
		
		
		
	}

	/**
	 * @return the resCards
	 */
	public ArrayList<ResourceType> getResCards() {
		return resCards;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param resCards the resCards to set
	 */
	public void setCards(ArrayList<ResourceType> resCards) {
		this.resCards = resCards;
	}
	
	/**
	 * Gets the playerID
	 * @return the playerID
	 */
	public int getPlayerID() {
		return this.playerID;
	}
	
	/**
	 * @param playerColor the playerColor to set
	 */
	public void setPlayerColor(PlayerColor playerColor) {
		this.playerColor = playerColor;
	}
	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}
	/**
	 * @param catan the catan to set
	 */
	public void setCatan(Catan catan) {
		this.catan = catan;
	}
	
	/**
	 * @return the catan
	 */
	public Catan getCatan() {
		return catan;
	}

	/**
	 * 
	 * @return the settlements
	 */
	public ArrayList<Settlement> getSettlements() {
		return settlements;
	}
	/**
	 * check if the rules for building a settlement is fulfilled
	 * Rules:
	 * First building phase:
	 * a settlement must built within two space of another city or settlement
	 * Next turn: 
	 * a settlement must be built within two space of another city or settlement and must be built on an 
	 * end of a player's road 
	 *@param edge
	 */
	public boolean canBuildSettlement(Vertex vertex) {
		if (catan.getRounds() == 1 ||catan.getRounds() == 2){
		for (Vertex connected : vertex.getConnectedVertices()) {
			if (connected.isOccupied()) {
				System.out.println("Cannot build within one space of another city or settlement");
				return false;
			}
		}
		return true;
		}
		else{
			for (Vertex connected : vertex.getConnectedVertices()) {
				if (connected.isOccupied()) {
					System.out.println("Cannot build within one space of another city or settlement");
					return false;
				}
			}
			for (Edge connected : vertex.getEdges()) {
				if (Building.isOwner(this, connected.getOccupyingBuilding())) {
					return true;
				}
			}
			System.out.println("Cannot build without your own road");
			return false;
			
		}
	}
	public boolean isBuildSettlementPressed() {
		return buildSettlementPressed;
	}

	public void setBuildSettlementPressed(boolean bool) {
		buildSettlementPressed = bool;
	}
	public boolean isBuildRoadPressed() {
		return buildRoadPressed;
	}

	public void setBuildRoadPressed(boolean buildRoadPressed) {
		this.buildRoadPressed = buildRoadPressed;
	}

	public boolean isBuildCityPressed() {
		return buildCityPressed;
	}

	public void setBuildCityPressed(boolean buildCityPressed) {
		this.buildCityPressed = buildCityPressed;
	}
	/**
	 * check if the rules for building a road is fulfilled
	 * Rules:
	 * One of two vertices of the edge must consist a building (road or settlement or city) and 
	 * the building must belong to the player
	 * 
	 *@param edge
	 */
	public boolean canBuildRoad(Edge edge) {
		Building fromPiece = edge.getVertexFrom().getOccupyingBuilding();
		Building toPiece = edge.getVertexTo().getOccupyingBuilding();
		boolean fromPieceIsOwned = Building.isOwner(this, fromPiece);
		boolean toPieceIsOwned = Building.isOwner(this, toPiece);
		if (fromPieceIsOwned || toPieceIsOwned) {
			return true;
		}

		for (Edge fromVertexEdge : edge.getVertexFrom().getEdges()) {
			if (Building.isOwner(this, fromVertexEdge.getOccupyingBuilding())) {
				return true;
			}
		}
		for (Edge fromVertexEdge : edge.getVertexTo().getEdges()) {
			if (Building.isOwner(this, fromVertexEdge.getOccupyingBuilding())) {
				return true;
			}
		}
		System.out.println("Only build on your building !");
		return false;
	}

	public int countSettlements(){
		return settlements.size();
	}
	public int countRoads(){
		return roads.size();
	}
	public int countCity(){
		return cities.size();
	}


	public void endingTurn() {
		this.buildSettlementPressed = false;
		this.setBuildRoadPressed(false);
		
	}
	
	/**
	 * @return the relocateRobber
	 */
	public boolean getRelocateRobber() {
		return relocateRobber;
	}

	/**
	 * @param relocateRobber the boolean relocateRobber to be set
	 */
	public void setRelocateRobber(boolean relocateRobber) {
		this.relocateRobber = relocateRobber;
		if(relocateRobber){
			catan.getGameSkin().setCursor(Cursor.OPEN_HAND);
		}
		else catan.getGameSkin().setCursor(Cursor.DEFAULT);
	}
	
	public void setCurrentTurnTaker(Player player) {
		this.currentTurnTaker = player;
		this.active = (currentTurnTaker == this);
		
	}
	public boolean isBot(){
		return false;
	}
	public void activateBot() {
		
	}
	
	
	/**
	 * Builds a new settlement or city (handleConstruction)
	 * @param typ type of the new building
	 * @param vertex vertex on which the building is located
	 */
	public void build(String typ, Vertex vertex) {
		if(typ == "Dorf"){
			Settlement newSettlement = new Settlement(vertex, this, catan.getIsland().getSkin());
			settlements.add(newSettlement);
			vertex.setOccupyingBuilding(newSettlement);
			for (Tile hex : vertex.getHexes()){
				hex.getSettlements().add(newSettlement);
			}
			settlementsLeft--;
		}
		else if(typ == "Stadt"){
			City newCity = new City(vertex, this, catan.getIsland().getSkin());
			vertex.setOccupyingBuilding(newCity);
			this.cities.add(newCity);
			this.settlementsLeft++;
			this.citiesLeft--;
		}
		vertex.setOccupied(true);
	}
	
	/**
	 * Builds a new road (handleConstruction)
	 * @param edge edge on which the road is located
	 */
	public void build(Edge edge) {
		Road newRoad = new Road(edge, this, catan.getIsland().getSkin());
		edge.setOccupyingBuilding(newRoad);
		edge.setOccupied(true);
		this.roads.add(newRoad);
		this.roadsLeft--;
	}
	
	/**
	 * Updates the information of the player
	 * @param victoryPoints
	 * @param name
	 * @param status
	 * @param color
	 * @param unknownResources
	 */
	public void update(int victoryPoints, String name, String status, PlayerColor color,
			int unknownResources) {
		this.victoryPoints = victoryPoints;
		this.name = name;
		this.status = status;
		this.playerColor = color;
		this.resCardsCount = unknownResources;
		
	}
	
	/**
	 * Use when player has costs in form of resource cards
	 */
	public void resCardsCosts(int costs){
		this.resCardsCount -= costs;
	}
	
	/**
	 * Use when player receives resource cards
	 * @param resources
	 */
	public void resCardsProduce(int resources) {
		this.resCardsCount += resources;
	}
}