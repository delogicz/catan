package bot;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import model.Edge;
import model.Player;
import model.PlayerClient;
import model.PlayerColor;
import model.Settlement;
import model.Tile;
import model.Vertex;

/**
 * AI for playing catan
 * @author Daniel Panangian
 */
public class Bot extends PlayerClient {
	
	protected boolean canBuildRoad;
	protected boolean canBuildSettlement;
	private boolean canBuildCity;
	
	private int rounds;
	private ArrayList<Vertex> availableVertices;
	private ArrayList<Edge> availableEdges;
	/**
	 * Constructor
	 * 
	 */
	public Bot(PlayerColor playerColor, int playerId, String name) {
		super(playerColor, playerId, name);
		availableVertices = new ArrayList<Vertex>();
		availableEdges = new ArrayList<Edge>();
		canBuildSettlement = false;
	}


	/**
	 * activates bot if its the currentTurnTaker
	 * 
	 */
	public void activateBot() {
		rounds = catan.getRound();
		active = false;
		if (currentTurnTaker == this){
			active = true;
		}
		while (active){
			System.out.println("Bot "+ name +" taking turn" );
			doStuff();
		}
		
	}

	/**
	 * Playing scheme for the bot
	 * 
	 */
	private void doStuff() {
		if (rounds == 1 || rounds == 2 ){
			buildSettlement();
			buildRoad();
			endTurn();
		}
		else {
			rollDice();
			if (relocateRobber == true){
				System.out.println("Bot "+ name +" set Robber" );
				setRobber();
				endTurn();
			}
			else{
			endTurn();
			}
		}
	}


	private void rollDice() {
		catan.getGameManager().getClient().sendRollDice();
		
	}


	private void setRobber() {
		int index = new Random().nextInt(catan.getIsland().getHexes().size());
		Tile newRobberPos = catan.getIsland().getHexes().get(index);
		
		ArrayList<Player> players = new ArrayList<Player>();
		
		for(Vertex vertex :catan.getIsland().getVertices()){
			if(vertex.isOccupied()){
				Player owner = vertex.getOccupyingBuilding().getOwner();
				if(!players.contains(owner) && owner != catan.getPlayerClient()){
					players.add(owner);
				}
			}
		}
		
		index = new Random().nextInt(players.size());
		catan.getGameManager().getClient().sendSetRobber(newRobberPos,index); 
	}


	private void endTurn() {
		active = false;
		catan.getGameManager().getClient().sendEndTurn();
	}


	private void buildRoad() {
		checkAvailableEdges();
		while(!canBuildRoad){
			Collections.shuffle(availableEdges);
			Edge space = availableEdges.get(0);
			if(canBuildRoad(space)){
				super.build(space, false);
			}
		}
		availableEdges.clear();
		canBuildRoad = false;
	}


	private void buildSettlement() {
		System.out.println("Bot "+ name + " try to build Settlement" );
		checkAvailableVertex();
		while(!canBuildSettlement){
			System.out.println("Bot "+ name + " try to build Settlement at random vertex" );
			Collections.shuffle(availableVertices);
			Vertex space = availableVertices.get(0);
			if (canBuildSettlement(space)){
					build("Dorf",space, false);
			}
		}
		canBuildSettlement = false;
		
	}

	/**
	 * check empty vertices
	 * 
	 */
	private void checkAvailableVertex() {
		for (Vertex vertex:catan.getIsland().getVertices()){
			if (!vertex.isOccupied()){
				availableVertices.add(vertex);
			}
		}
		
	}
	/**
	 * check empty edges
	 * 
	 */
	private void checkAvailableEdges() {
		if (rounds == 1){
			Settlement firstSettlement = settlements.get(0);
			for (Edge edge: firstSettlement.getVertex().getEdges() ){
				if (!edge.isOccupied()){
					availableEdges.add(edge);
				}
			}
		}
		else if (rounds==2){
			Settlement secondSettlement = settlements.get(1);
			for (Edge edge: secondSettlement.getVertex().getEdges() ){
				if (!edge.isOccupied()){
					availableEdges.add(edge);
				}
			}
		}
	}
	/**
	 * returns true if a player is a bot
	 * 
	 */
	public boolean isBot(){
		return true;
	}
	/**
	 * pause robot brain recreating human way of thinking
	 * 
	 */
	private void pause(int seconds){
		try {
		    Thread.sleep(1000 * seconds);                
		} catch(InterruptedException ex) {
		    Thread.currentThread().interrupt();
		}
		
	}

}
