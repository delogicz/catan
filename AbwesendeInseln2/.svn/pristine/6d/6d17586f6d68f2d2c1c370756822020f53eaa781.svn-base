package model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;


public class Hand {
	private ArrayList<ResourceType> resources;
	private int lumberCount;
	private int brickCount;
	private int woolCount;
	private int grainCount;
	private int oreCount;
	
	private ArrayList<Building> buildings;
	private ArrayList<Harbour> harbours;
	
	public Hand(){
		resources = new ArrayList<ResourceType>();
		buildings = new ArrayList<Building>();
		harbours = new ArrayList<Harbour>();
	}
	
	
	
	
	
	public ArrayList<ResourceType> getResources() {
		return resources;
	}
	public void addResources(ResourceType resource) {
		this.resources.add(resource);
		switch(resource){
			case LUMBER	: lumberCount++;
				break;
			case BRICK	: brickCount++;
				break;
			case WOOL	: woolCount++;
				break;
			case GRAIN	: grainCount++;
				break;
			case ORE	: oreCount++;
				break;
		}
	}
	private void decreaseCount(ResourceType resource) {
		switch(resource){
		case LUMBER	: lumberCount--;
			break;
		case BRICK	: brickCount--;
			break;
		case WOOL	: woolCount--;
			break;
		case GRAIN	: grainCount--;
			break;
		case ORE	: oreCount--;
			break;
	}
		
	}
	public boolean canBuyRoad() {
		return resources.contains(ResourceType.BRICK) && resources.contains(ResourceType.LUMBER);
	}

	public boolean canBuySettlement() {
		return resources.contains(ResourceType.BRICK) && resources.contains(ResourceType.WOOL)
				&& resources.contains(ResourceType.GRAIN) && resources.contains(ResourceType.LUMBER);
	}

	public boolean canBuyCity() {
		return Collections.frequency(resources, ResourceType.GRAIN) >= 2
				&& Collections.frequency(resources, ResourceType.ORE) >= 3;
	}

	public boolean canBuyDevCard() {
		return resources.contains(ResourceType.ORE) && resources.contains(ResourceType.GRAIN)
				&& resources.contains(ResourceType.WOOL);
	}

	public boolean spend(ResourceType... resources) {
		for (ResourceType resource : resources) {
			int index = this.resources.indexOf(resource);
			if (index != -1) {
				this.resources.remove(index);
				this.decreaseCount(resource);
			} else {
				return false;
			}
		}
		return true;
	}

	





	public void buyRoad() {
		spend(ResourceType.LUMBER, ResourceType.BRICK);
	}

	public void buySettlement() {
		spend(ResourceType.LUMBER, ResourceType.BRICK, ResourceType.WOOL, ResourceType.GRAIN);
	}

	public void buyCity() {
		spend(ResourceType.ORE, ResourceType.ORE, ResourceType.ORE, ResourceType.GRAIN, ResourceType.GRAIN);
	}

	public void buyDevCard() {
		spend(ResourceType.ORE, ResourceType.GRAIN, ResourceType.WOOL);
	}
	

	public void addCard(ResourceType resource) {
		resources.add(resource);
	}
	public ArrayList<Building> getBuildings() {
		return buildings;
	}
	public void addBuilding(Building building) {
		this.buildings.add(building);
	}
	public ArrayList<Harbour> getHarbours() {
		return harbours;
	}
	public void addHarbour(Harbour harbour) {
		this.harbours.add(harbour);
	}

	public int getLumberCount() {
		return lumberCount;
	}
	public int getBrickCount() {
		return brickCount;
	}
	public int getWoolCount() {
		return woolCount;
	}
	public int getGrainCount() {
		return grainCount;
	}
	public int getOreCount() {
		return oreCount;
	}
	
}
