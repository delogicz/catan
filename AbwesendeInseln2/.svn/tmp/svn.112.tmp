package model;

import java.util.ArrayList;
import java.util.Collections;

import view.IslandSkin;
import view.RoadSkin;

/**
 * A road. Defined by associated edge and player.
 * @author Daniel Panangian, Stefanie Kloss
 */
public class Road extends Building {
	
	private Edge edge;
	private RoadSkin roadSkin;
	private ArrayList<Edge> edgesTo;
	private ArrayList<Edge> edgesFrom;
	private int connectedRoads;
	private ArrayList<Edge> tempEdges;
	
	public Road(Edge edge, Player player, IslandSkin islandSkin){
		this.edge = edge;
		edge.setOccupyingBuilding(this);
		initializeEdgesToFrom();
		this.owner = player;
		this.roadSkin = new RoadSkin(this, islandSkin);
		this.tempEdges = new ArrayList<Edge>();
		
		
		checkConnectedRoads();
		if(this.connectedRoads > player.getConnectedRoads()){
			player.setConnectedRoads(this.connectedRoads);
		}
	}
	
	public void initializeEdgesToFrom() {
		this.edgesTo = edge.getVertexTo().getEdges();
		this.edgesFrom = edge.getVertexFrom().getEdges();
		
	}

	/**
	 * Constructor for Server
	 * @param edge
	 * @param player
	 */
	public Road(Edge edge, Player player){
		this.edge = edge;
		this.owner = player;
	}
	
	public Player getOwner(){
		return this.owner;
	}
	
	public Edge getEdge(){
		return this.edge;
	}
	public void checkConnectedRoads(){
		
		this.setConnectedRoads(checkConnectedRoadsFrom(edge) + checkConnectedRoadsTo(edge) + 1);
		if(connectedRoads > owner.getConnectedRoads()) owner.setConnectedRoads(connectedRoads);
		System.out.println("CONNECTED ROADS : "+checkConnectedRoadsFrom(this.edge) + checkConnectedRoadsTo(this.edge) + 1);
	}
	
	public int checkConnectedRoadsFrom(Edge e){
//		try {
//			Thread.sleep(1000 * 1);
//		} catch (InterruptedException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}
		

		
		for(Edge edges : tempEdges ){
			System.out.println("CHECKED EDGES : "+ edges);
		}
		ArrayList<Edge> tempEdgesFrom = e.getVertexFrom().getEdges();
		System.out.println("EdgesFrom:");
		System.out.println(tempEdgesFrom.size());
		int i = 0;
		for(Edge edge : tempEdgesFrom){
			if (edge == e) Collections.swap(tempEdgesFrom, i, tempEdgesFrom.size() - 1);
			i++;
		}
		for(Edge edges : tempEdgesFrom ){
			System.out.println("Building : "+ edges.getOccupyingBuilding());
		}
		if	(tempEdgesFrom.get(tempEdgesFrom.size()- 1).getOccupyingBuilding() == null ) return 0;
		else if (tempEdgesFrom.size() ==2){
			if (tempEdgesFrom.get(0).getOccupyingBuilding() == null || tempEdgesFrom.get(0).getOccupyingBuilding().getOwner() != this.owner) return 0;
			else {
				int tempConnectedRoads;

				if (tempEdges.contains(e)) {
					if(Collections.frequency(tempEdges,e) > 4 && e == tempEdges.get(0)) return 0; 
					else tempEdges.add(e);
				}
				else tempEdges.add(e);
				
				if (tempEdgesFrom.get(1).getVertexFrom() != tempEdgesFrom.get(0).getVertexFrom()) {
					tempConnectedRoads = checkConnectedRoadsFrom(tempEdgesFrom.get(0));
				}
				else {
					tempConnectedRoads = checkConnectedRoadsTo(tempEdgesFrom.get(0));
				}
				return tempConnectedRoads + 1;
				}
			
		}
		else{
			
			if (tempEdgesFrom.get(1).getOccupyingBuilding() == null && tempEdgesFrom.get(0).getOccupyingBuilding() == null) {
				System.out.println("end road"); return 0;
			}
			if(tempEdgesFrom.get(1).getOccupyingBuilding() == null){
				if (tempEdgesFrom.get(0).getOccupyingBuilding().getOwner() != this.owner){
					System.out.println("not your road"); return 0;
				}
				else {
					System.out.println("ein null andere deins 1");
					int tempConnectedRoadsLeft;
					int tempConnectedRoadsRight;
					if (tempEdges.contains(e)) {
						if(Collections.frequency(tempEdges,e) > 4 && e == tempEdges.get(0)) return 0; 
						else tempEdges.add(e);
					}
					else tempEdges.add(e);
					if (tempEdgesFrom.get(2).getVertexFrom() != tempEdgesFrom.get(0).getVertexFrom()) {
						 tempConnectedRoadsLeft = checkConnectedRoadsFrom(tempEdgesFrom.get(0));
						}
					else {
						tempConnectedRoadsLeft = checkConnectedRoadsTo(tempEdgesFrom.get(0));
					}
					if (tempEdgesFrom.get(2).getVertexFrom() != tempEdgesFrom.get(1).getVertexFrom()) {
						 tempConnectedRoadsRight = checkConnectedRoadsFrom(tempEdgesFrom.get(1));
						}
					else {
						tempConnectedRoadsRight = checkConnectedRoadsTo(tempEdgesFrom.get(1));
					}
					
					int toConnectedRoads = Math.max(tempConnectedRoadsLeft,tempConnectedRoadsRight);
					return toConnectedRoads + 1;
					}
				
			}
			if (tempEdgesFrom.get(0).getOccupyingBuilding() == null){
				if (tempEdgesFrom.get(1).getOccupyingBuilding().getOwner() != this.owner) {
					System.out.println("not your road"); return 0;
				}
				else {
					System.out.println("ein null andere deins 2");
					int tempConnectedRoadsLeft;
					int tempConnectedRoadsRight;
					if (tempEdges.contains(e)) {
						if(Collections.frequency(tempEdges,e) > 4 && e == tempEdges.get(0)) return 0; 
						else tempEdges.add(e);
					}
					else tempEdges.add(e);
					if (tempEdgesFrom.get(2).getVertexFrom() != tempEdgesFrom.get(0).getVertexFrom()) {
						 tempConnectedRoadsLeft = checkConnectedRoadsFrom(tempEdgesFrom.get(0));
						}
					else {
						tempConnectedRoadsLeft = checkConnectedRoadsTo(tempEdgesFrom.get(0));
					}
					if (tempEdgesFrom.get(2).getVertexFrom() != tempEdgesFrom.get(1).getVertexFrom()) {
						 tempConnectedRoadsRight = checkConnectedRoadsFrom(tempEdgesFrom.get(1));
						}
					else {
						tempConnectedRoadsRight = checkConnectedRoadsTo(tempEdgesFrom.get(1));
					}
					
					int toConnectedRoads = Math.max(tempConnectedRoadsLeft,tempConnectedRoadsRight);
					return toConnectedRoads + 1;
					}
				
			}
			else{
				if (tempEdgesFrom.get(1).getOccupyingBuilding().getOwner() != this.owner 
						&& tempEdgesFrom.get(0).getOccupyingBuilding().getOwner() != this.owner) {
					System.out.println("those are not your road");return 0;
				}
				else {
					if (tempEdges.contains(e)) {
						if(Collections.frequency(tempEdges,e) > 4 && e == tempEdges.get(0)) return 0; 
						else tempEdges.add(e);
					}
					else tempEdges.add(e);
					System.out.println("ein null andere deins");
					int tempConnectedRoadsLeft;
					int tempConnectedRoadsRight;
					if (tempEdgesFrom.get(2).getVertexFrom() != tempEdgesFrom.get(0).getVertexFrom()) {
						 tempConnectedRoadsLeft = checkConnectedRoadsFrom(tempEdgesFrom.get(0));
						}
					else {
						tempConnectedRoadsLeft = checkConnectedRoadsTo(tempEdgesFrom.get(0));
					}
					if (tempEdgesFrom.get(2).getVertexFrom() != tempEdgesFrom.get(1).getVertexFrom()) {
						 tempConnectedRoadsRight = checkConnectedRoadsFrom(tempEdgesFrom.get(1));
						}
					else {
						tempConnectedRoadsRight = checkConnectedRoadsTo(tempEdgesFrom.get(1));
					}
					
					int toConnectedRoads = Math.max(tempConnectedRoadsLeft,tempConnectedRoadsRight);
					return toConnectedRoads + 1;
					}
			}
			}
	}
	public int checkConnectedRoadsTo(Edge e){
//		try {
//			Thread.sleep(1000 * 1);
//		} catch (InterruptedException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}
		if (tempEdges.contains(e)) {
			if(Collections.frequency(tempEdges,e) > 4 && e == tempEdges.get(0)) return 0; 
			else tempEdges.add(e);
		}
		else tempEdges.add(e);

		
		for(Edge edges : tempEdges ){
			System.out.println("CHECKED EDGES : "+ edges);
		}
		
		ArrayList<Edge> tempEdgesTo = e.getVertexTo().getEdges();
		System.out.println("EdgesTo:");
		System.out.println(tempEdgesTo.size());
		int i = 0;
		for(Edge edge : tempEdgesTo){
			if (edge == e) Collections.swap(tempEdgesTo, i, tempEdgesTo.size() - 1);
			i++;
		}
		for(Edge edges : tempEdgesTo ){
			System.out.println("Building : "+ edges.getOccupyingBuilding());
		}
		if (tempEdgesTo.get(tempEdgesTo.size()- 1).getOccupyingBuilding() == null ) return 0;
		if (tempEdgesTo.size() ==2){
			if (tempEdgesTo.get(0).getOccupyingBuilding() == null || tempEdgesTo.get(0).getOccupyingBuilding().getOwner() != this.owner) return 0;
			else {
				if (tempEdges.contains(e)) {
					if(Collections.frequency(tempEdges,e) > 4 && e == tempEdges.get(0)) return 0; 
					else tempEdges.add(e);
				}
				else tempEdges.add(e);
				int tempConnectedRoads;
				if (tempEdgesTo.get(1).getVertexFrom() != tempEdgesTo.get(0).getVertexFrom()) {
					tempConnectedRoads = checkConnectedRoadsTo(tempEdgesTo.get(0));
				}
				else {
					tempConnectedRoads = checkConnectedRoadsFrom(tempEdgesTo.get(0));
				}
				return tempConnectedRoads + 1;
				}
			
		}
		else{
			
			if (tempEdgesTo.get(1).getOccupyingBuilding() == null && tempEdgesTo.get(0).getOccupyingBuilding() == null) {
				System.out.println("end road"); return 0;
			}
			if(tempEdgesTo.get(1).getOccupyingBuilding() == null){
				if (tempEdgesTo.get(0).getOccupyingBuilding().getOwner() != this.owner){
					System.out.println("not your road"); return 0;
				}
				else {
					if (tempEdges.contains(e)) {
						if(Collections.frequency(tempEdges,e) > 4 && e == tempEdges.get(0)) return 0; 
						else tempEdges.add(e);
					}
					else tempEdges.add(e);
					System.out.println("ein null andere deins 1");
					int tempConnectedRoadsLeft;
					int tempConnectedRoadsRight;
					if (tempEdgesTo.get(2).getVertexTo() != tempEdgesTo.get(0).getVertexTo()) {
						 tempConnectedRoadsLeft = checkConnectedRoadsTo(tempEdgesTo.get(0));
						}
					else {
						tempConnectedRoadsLeft = checkConnectedRoadsFrom(tempEdgesTo.get(0));
					}
					if (tempEdgesTo.get(2).getVertexTo() != tempEdgesTo.get(1).getVertexTo()) {
						 tempConnectedRoadsRight = checkConnectedRoadsTo(tempEdgesTo.get(1));
						}
					else {
						tempConnectedRoadsRight = checkConnectedRoadsFrom(tempEdgesTo.get(1));
					}
					
					int toConnectedRoads = Math.max(tempConnectedRoadsLeft,tempConnectedRoadsRight);
					return toConnectedRoads + 1;
					}
				
			}
			if(tempEdgesTo.get(0).getOccupyingBuilding() == null){
				if (tempEdgesTo.get(1).getOccupyingBuilding().getOwner() != this.owner) {
					System.out.println("not your road"); return 0;
				}
				else {
					if (tempEdges.contains(e)) {
						if(Collections.frequency(tempEdges,e) > 4 && e == tempEdges.get(0)) return 0; 
						else tempEdges.add(e);
					}
					else tempEdges.add(e);
					System.out.println("ein null andere deins 2");
					int tempConnectedRoadsLeft;
					int tempConnectedRoadsRight;
					if (tempEdgesTo.get(2).getVertexTo() != tempEdgesTo.get(0).getVertexTo()) {
						 tempConnectedRoadsLeft = checkConnectedRoadsTo(tempEdgesTo.get(0));
						}
					else {
						tempConnectedRoadsLeft = checkConnectedRoadsFrom(tempEdgesTo.get(0));
					}
					if (tempEdgesTo.get(2).getVertexTo() != tempEdgesTo.get(1).getVertexTo()) {
						 tempConnectedRoadsRight = checkConnectedRoadsTo(tempEdgesTo.get(1));
						}
					else {
						tempConnectedRoadsRight = checkConnectedRoadsFrom(tempEdgesTo.get(1));
					}
					
					int toConnectedRoads = Math.max(tempConnectedRoadsLeft,tempConnectedRoadsRight);
					return toConnectedRoads + 1;
					}
				
			}
			else{
				if (tempEdgesTo.get(1).getOccupyingBuilding().getOwner() != this.owner 
						&& tempEdgesTo.get(0).getOccupyingBuilding().getOwner() != this.owner) {
					System.out.println("those are not your road");return 0;
				}
				else {
					if (tempEdges.contains(e)) {
						if(Collections.frequency(tempEdges,e) > 4 && e == tempEdges.get(0)) return 0; 
						else tempEdges.add(e);
					}
					else tempEdges.add(e);
					System.out.println("beide deins");
					int tempConnectedRoadsLeft;
					int tempConnectedRoadsRight;
					if (tempEdgesTo.get(2).getVertexTo() != tempEdgesTo.get(0).getVertexTo()) {
						 tempConnectedRoadsLeft = checkConnectedRoadsTo(tempEdgesTo.get(0));
						}
					else {
						tempConnectedRoadsLeft = checkConnectedRoadsFrom(tempEdgesTo.get(0));
					}
					if (tempEdgesTo.get(2).getVertexTo() != tempEdgesTo.get(1).getVertexTo()) {
						 tempConnectedRoadsRight = checkConnectedRoadsTo(tempEdgesTo.get(1));
						}
					else {
						tempConnectedRoadsRight = checkConnectedRoadsFrom(tempEdgesTo.get(1));
					}
					
					int toConnectedRoads = Math.max(tempConnectedRoadsLeft,tempConnectedRoadsRight);
					return toConnectedRoads + 1;
					}
			}
			}
	}
//	public void pressed() {
//		checkConnectedRoads();
//		System.out.println(this.getBuildingType()+ " "+this.getOwner().getName());
//		System.out.println("EDGESFROM : " + this.edgesFrom);
//		for(Edge edges : this.edgesFrom ){
//			System.out.println("Building : "+ edges.getOccupyingBuilding());
//		}
//		System.out.println("EDGESTO : " + this.edgesTo);
//		for(Edge edges : this.edgesTo ){
//			System.out.println("Building : "+ edges.getOccupyingBuilding());
//		}
//		System.out.println("---------------------------------------------------");
//		tempEdges.clear();
//	}

	public int getConnectedRoads() {
		return connectedRoads;
	}

	public void setConnectedRoads(int connectedRoads) {
		this.connectedRoads = connectedRoads;
	}

		
}
